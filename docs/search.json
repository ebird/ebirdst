[{"path":[]},{"path":"https://ebird.github.io/ebirdst/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, gender identity expression, level experience, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://ebird.github.io/ebirdst/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ebird.github.io/ebirdst/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://ebird.github.io/ebirdst/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://ebird.github.io/ebirdst/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team mta45@cornell.edu. project team review investigate complaints, respond way deems appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://ebird.github.io/ebirdst/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available http://contributor-covenant.org/version/1/4","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/CONTRIBUTING.html","id":"please-contribute","dir":"","previous_headings":"","what":"Please contribute!","title":"CONTRIBUTING","text":"love collaboration.","code":""},{"path":"https://ebird.github.io/ebirdst/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page ","code":""},{"path":"https://ebird.github.io/ebirdst/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/ebirdst.git Make sure track progress upstream (.e., version ebirdst ebird/ebirdst) git remote add upstream https://github.com/ebird/ebirdst.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new branch) alter package functionality (e.g., code , just documentation) please write tests cove new functionality. Push account Submit pull request home base ebird/ebirdst","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ebird.github.io/ebirdst/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"map","dir":"Articles","previous_headings":"","what":"Mapping relative abundance","title":"eBird Status Data Products Applications","text":"section, ’ll demonstrate make simple map relative abundance within given region. example, ’ll make map breeding season relative abundance Sage Trasher Wyoming. maps produced using approach suitable many applications; however, high-quality publication-ready maps, may worthwhile using traditional GIS environment QGIS ArcGIS rather R. start downloading data Sage Thrasher loading breeding season relative abundance raster. pattern argument ebirdst_download_status() can used download specific files need. simplest way map seasonal relative abundance data use built plot() function terra package.  Clearly simple approach doesn’t work well! wide variety issues ’ll tackle one time.","code":"# download the yellow-bellied sapsucker data ebirdst_download_status(\"sagthr\",                         pattern = \"abundance_seasonal_mean\")  # load seasonal mean relative abundance at 3km resolution abd_seasonal <- load_raster(\"sagthr\",                              product = \"abundance\",                              period = \"seasonal\",                             metric = \"mean\",                             resolution = \"3km\")  # extract just the breeding season relative abundance abd_breeding <- abd_seasonal[[\"breeding\"]] plot(abd_breeding, axes = FALSE)"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"map-extent","dir":"Articles","previous_headings":"Mapping relative abundance","what":"Cropping and masking","title":"eBird Status Data Products Applications","text":"raster data downloaded package defined global grid, regardless range individual species. result, mapping data produce global map default. However, Sage Thrasher occurs western United States, barely visible global map. need constrain extent map make useful. example, ’ll download boundary Wyoming (state United States harbors large proportion breeding population Sage Thrasher) use crop mask relative abundance data. region defined Shapefile GeoPackage can instead load polygon defining boundary region using read_sf().","code":"# wyoming boundary region_boundary <- ne_states(iso_a2 = \"US\") |>    filter(name == \"Wyoming\")  # project boundary to match raster data region_boundary_proj <- st_transform(region_boundary, st_crs(abd_breeding))  # crop and mask to boundary of wyoming abd_breeding_mask <- crop(abd_breeding, region_boundary_proj) |>    mask(region_boundary_proj)  # map the cropped data plot(abd_breeding_mask, axes = FALSE)"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"map-projection","dir":"Articles","previous_headings":"Mapping relative abundance","what":"Projection","title":"eBird Status Data Products Applications","text":"raster data provided equal area sinusoidal projection NASA MODIS data. projection suitable analysis, ideal mapping since introduces significant distortion. Instead, ’s best select equal area projection tailored region. good general purpose choice Lambert’s azimuthal equal area projection centered focal region. can defined programmatically follows.","code":"# find the centroid of the region region_centroid <- region_boundary |>    st_geometry() |>    st_transform(crs = 4326) |>    st_centroid() |>    st_coordinates() |>    round(1)  # define projection crs_laea <- paste0(\"+proj=laea +lat_0=\", region_centroid[2],                    \" +lon_0=\", region_centroid[1])  # transform to the custom projection using nearest neighbor resampling abd_breeding_laea <- project(abd_breeding_mask, crs_laea, method = \"near\") |>    # remove areas of the raster containing no data   trim()  # map the cropped and projected data plot(abd_breeding_laea, axes = FALSE, breakby = \"cases\")"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"map-bins","dir":"Articles","previous_headings":"Mapping relative abundance","what":"Abundance bins","title":"eBird Status Data Products Applications","text":"relative abundance data uniformly distributed, can lead challenges distinguishing areas differing levels abundance. especially true highly aggregatory species like shorebirds ducks. address , ’ll use quantile bins map, color legend corresponds equal number cells raster. ’ll define bins excluding zeros, assign separate color zeros. can also use function abundance_palette() get set colors use legends eBird Status Trends website.","code":"# quantiles of non-zero values v <- values(abd_breeding_laea, na.rm = TRUE, mat = FALSE) v <- v[v > 0] breaks <- quantile(v, seq(0, 1, by = 0.1)) # add a bin for 0 breaks <- c(0, breaks)  # status and trends palette pal <- ebirdst_palettes(length(breaks) - 2) # add a color for zero pal <- c(\"#e6e6e6\", pal)  # map using the quantile bins plot(abd_breeding_laea, breaks = breaks, col = pal, axes = FALSE)"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"map-basemap","dir":"Articles","previous_headings":"Mapping relative abundance","what":"Basemap","title":"eBird Status Data Products Applications","text":"Finally, ’ll add state country boundaries provide context generate nicer legend. R package rnaturalearth excellent source attribution free contextual GIS data.","code":"# natural earth boundaries countries <- ne_countries(returnclass = \"sf\") |>    st_geometry() |>    st_transform(crs_laea) states <- ne_states(iso_a2 = \"US\") |>    st_geometry() |>    st_transform(crs_laea)  # define the map plotting extent with the region boundary polygon region_boundary_laea <- region_boundary |>    st_geometry() |>    st_transform(crs_laea) plot(region_boundary_laea) # add basemap plot(countries, col = \"#cfcfcf\", border = \"#888888\", add = TRUE) # add relative abundance plot(abd_breeding_laea,      breaks = breaks, col = pal,       maxcell = ncell(abd_breeding_laea),      legend = FALSE, add = TRUE) # add boundaries lines(vect(countries), col = \"#ffffff\", lwd = 3) lines(vect(states), col =  \"#ffffff\", lwd = 1.5, xpd = TRUE) lines(vect(region_boundary_laea), col = \"#ffffff\", lwd = 3, xpd = TRUE)  # add legend using the fields package # label the bottom, middle, and top labels <- quantile(breaks, c(0, 0.5, 1)) label_breaks <- seq(0, 1, length.out = length(breaks)) image.plot(zlim = c(0, 1), breaks = label_breaks, col = pal,            smallplot = c(0.90, 0.93, 0.15, 0.85),            legend.only = TRUE,            axis.args = list(at = c(0, 0.5, 1),                              labels = round(labels, 2),                             col.axis = \"black\", fg = NA,                             cex.axis = 0.9, lwd.ticks = 0,                             line = -0.5))"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"chron","dir":"Articles","previous_headings":"","what":"Migration chronologies","title":"eBird Status Data Products Applications","text":"application ’ll use weekly estimates chart change relative abundance throughout year given region. migration chronologies can useful identifying given geography receives highest intensity use species group species. ’ll start generating chronology confidence intervals single species, demonstrate produce multi-species chronologies examples, ’ll consider shorebirds Kansas (state near center United States). start ’ll load polygon boundary Kansas.","code":"region_boundary <- ne_states(iso_a2 = \"US\") |>    filter(name == \"Kansas\")"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"chron-single","dir":"Articles","previous_headings":"Migration chronologies","what":"Single species with uncertainty","title":"eBird Status Data Products Applications","text":"single species example, let’s chart migration chronology Snowy Plover Kansas. First need download load relevant eBird Status Data Products species: weekly median relative abundance upper lower confidence intervals weekly relative abundance. Now can calculate mean relative abundance confidence intervals week year within Kansas. Finally, let’s use data frame generate migration chronology species.","code":"# download data if they haven't already been downloaded ebirdst_download_status(\"Snowy Plover\",                          pattern = \"abundance_(median|upper|lower)_3km\")  # load raster data abd_median <- load_raster(\"snoplo5\", product = \"abundance\", metric = \"median\") abd_lower <- load_raster(\"snoplo5\", product = \"abundance\", metric = \"lower\") abd_upper <- load_raster(\"snoplo5\", product = \"abundance\", metric = \"upper\")  # project region boundary to match raster data region_boundary_proj <- st_transform(region_boundary, st_crs(abd_median)) # extract values within region and calculate the mean abd_median_region <- extract(abd_median, region_boundary_proj,                              fun = \"mean\", na.rm = TRUE, ID = FALSE) abd_lower_region <- extract(abd_lower, region_boundary_proj,                             fun = \"mean\", na.rm = TRUE, ID = FALSE) abd_upper_region <- extract(abd_upper, region_boundary_proj,                             fun = \"mean\", na.rm = TRUE, ID = FALSE)  # transform to data frame format abd_median_region <- data.frame(week = as.Date(names(abd_median_region)),                                 median = as.numeric(abd_median_region[1, ])) abd_lower_region <- data.frame(week = as.Date(names(abd_lower_region)),                                lower = as.numeric(abd_lower_region[1, ])) abd_upper_region <- data.frame(week = as.Date(names(abd_upper_region)),                                upper = as.numeric(abd_upper_region[1, ]))  # combine median and confidence intervals chronology <- abd_median_region |>    inner_join(abd_lower_region, by = \"week\") |>    inner_join(abd_upper_region, by = \"week\") ggplot(chronology) +   aes(x = week, y = median) +   geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +   geom_line() +   scale_x_date(date_labels = \"%b\", date_breaks = \"1 month\") +   labs(x = \"Week\",         y = \"Mean relative abundance in Kansas\",        title = \"Migration chronology for Snowy Plover in Kansas\")"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"chron-multi","dir":"Articles","previous_headings":"Migration chronologies","what":"Multi-species","title":"eBird Status Data Products Applications","text":"Migration chronologies can also overlaid multiple species, allowing comparison migration timing species. However, comparing eBird Status Data Products across species requires extra caution models give relative rather absolute abundance. example, species differ detectability, may cause differences relative abundance. address , ’ll use proportion population layers, give proportion total range-wide relative abundance falling within cell. proportion population layers help control difference detectability, allowing us compare multiple species Following similar approach used single species chronology , ’ll estimate migration chronologies suite shorebird species Kansas. However, example ’ll estiate proportion population falling within Kansas rather mean abundance. Finally, can use data frame generate migration chronologies species.  variety patterns revealed migration chronology. Semipalmated Sandpiper Hudsonian Godwit pass region pre-breeding migration, presumably way breed north, don’t appear take route post-breeding migration. Snowy Plover occurs region much year, spikes pre- post-breeding migration. Finally, American Avocet also occurs region much year, without strong peaks migration.","code":"species <- c(\"American Avocet\", \"Snowy Plover\", \"Hudsonian Godwit\",               \"Semipalmated Sandpiper\")  chronologies <- NULL for (species in species) {   # download propotion of population data   ebirdst_download_status(species,                           pattern = \"proportion-population_median_3km\")      # load raster data   prop_pop <- load_raster(species, product = \"proportion-population\")      # estimate proportion of population within the region   prop_pop_region <- extract(prop_pop, region_boundary_proj,                              fun = \"sum\", na.rm = TRUE, ID = FALSE)   prop_pop_region <- data.frame(species = species,                                 week = as.Date(names(prop_pop_region)),                                 median = as.numeric(prop_pop_region[1, ]))      # combine with other species   chronologies <- bind_rows(chronologies, prop_pop_region) } ggplot(chronologies) +   aes(x = week, y = median, color = species) +   geom_line(linewidth = 1) +   scale_x_date(date_labels = \"%b\", date_breaks = \"1 month\") +   scale_y_continuous(labels = scales::label_percent()) +   scale_color_brewer(palette = \"Set1\") +   labs(x = NULL,         y = \"Percent of population in Kansas\",        title = \"Migration chronologies for shorebirds in Kansas\") +     theme(legend.position = \"bottom\")"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"stats","dir":"Articles","previous_headings":"","what":"Regional statistics","title":"eBird Status Data Products Applications","text":"eBird Status Trends website provides regional summary statistics country state/province level species. example, can use regional stats see 33% non-breeding population Golden Eagle falls within United States. website also allows users draw customs polygons get summary statistics. within polygons. However, cases may want estimate regional summary statistics way isn’t supported website. ’ll provide examples calculating proportion population within region. ’ll use Golden Eagle examples.","code":"ebirdst_download_status(\"Golden Eagle\")"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"stats-seasonal","dir":"Articles","previous_headings":"Regional statistics","what":"Proportion of seasonal population","title":"eBird Status Data Products Applications","text":"example, ’ll estimate seasonal proportion population Golden Eagle within state United States. Note Golden Eagles distributed throughout Northern Hemisphere, North America, Asia, Europe. example, ’ll estimating proportion global population, next example ’ll estimate proportion North American population. start, ’ll load seasonal proportion population raster layers polygons defining state. Shapefile GeoPackage defining region interest (e.g., protected area Bird Conservation Region), load using read_sf() function. Now can use extract() function terra calculate proportion population within state season. Setting weights = TRUE triggers extract() calculate weighted sum account adjust partial coverage raster cells region polygons. example, weights argument little impact, can play important role smaller regions.","code":"# seasonal proportion of population prop_pop_seasonal <- load_raster(\"goleag\",                                   product = \"proportion-population\",                                  period = \"seasonal\")  # state boundaries, excluding hawaii states <- ne_states(iso_a2 = \"US\") |>    filter(name != \"Hawaii\") |>    select(state = name) |>    # transform to match projection of raster data   st_transform(crs = st_crs(prop_pop_seasonal)) state_prop_pop <- extract(prop_pop_seasonal, states,                            fun = \"sum\", na.rm = TRUE, weights = TRUE,                           bind = TRUE) |>    as.data.frame() |>    # sort in descending order or breeding proportion of population   arrange(desc(breeding)) head(state_prop_pop) #>      state    breeding  nonbreeding prebreeding_migration #> 1   Alaska 0.059539077 1.246767e-05            0.18449229 #> 2  Wyoming 0.024791619 4.237502e-02            0.02376162 #> 3  Montana 0.021015488 4.665311e-02            0.02299377 #> 4   Nevada 0.014276172 3.525481e-02            0.01667688 #> 5     Utah 0.013512905 3.705198e-02            0.01845320 #> 6 Colorado 0.008481925 2.615300e-02            0.01133763 #>   postbreeding_migration #> 1             0.06922753 #> 2             0.02112028 #> 3             0.03463215 #> 4             0.01537817 #> 5             0.01493372 #> 6             0.01077595"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"stats-relative","dir":"Articles","previous_headings":"Regional statistics","what":"Proportion of North American population","title":"eBird Status Data Products Applications","text":"broadly distributed species, Golden Eagle, may desirable estimate proportion population relative subset full range. example, let’s calculate proportion North American population falling within state, define North America include United States, Canada, Mexico. ’ll start creating polygon boundary North America, using mask seasonal relative abundance raster, dividing masked relative abundance raster total relative abundance across North America generate layers showing proportion North American population. Now can calculate proportion population using exactly method previous section. Notice proportions higher previous section since ’re now estimating proportion North American population rather proportion global population. example, 6% global breeding season population occurs Alaska, corresponds 24% North American breeding season population.","code":"# seasonal relative abundance abd_seasonal <- load_raster(\"goleag\",                              product = \"abundance\",                             period = \"seasonal\")  # load country polygon, union into a single polygon, and project noram <- ne_countries(country = c(\"United States of America\",                                    \"Canada\", \"Mexico\")) |>    st_union() |>    st_transform(crs = st_crs(abd_seasonal)) |>    # vect converts an sf object to terra format for mask()   vect()  # mask seasonal abundance abd_seasonal_noram <- mask(abd_seasonal, noram)  # total north american relative abundance for each season abd_noram_total <- global(abd_seasonal_noram, fun = \"sum\", na.rm = TRUE)  # proportion of north american population prop_pop_noram <- abd_seasonal_noram / abd_noram_total$sum state_prop_noram_pop <- extract(prop_pop_noram, states,                                  fun = \"sum\", na.rm = TRUE, weights = TRUE,                                 bind = TRUE) |>    as.data.frame() |>    # sort in descending order or breeding proportion of population   arrange(desc(breeding)) head(state_prop_noram_pop) #>      state   breeding  nonbreeding prebreeding_migration postbreeding_migration #> 1   Alaska 0.23794508 0.0000337296            0.35744748             0.16047911 #> 2  Wyoming 0.09942421 0.1146398620            0.04606608             0.04913360 #> 3  Montana 0.08428043 0.1262136568            0.04457747             0.08056719 #> 4   Nevada 0.05725310 0.0953771106            0.03233106             0.03577531 #> 5     Utah 0.05419210 0.1002391073            0.03577476             0.03474136 #> 6 Colorado 0.03401588 0.0707534000            0.02198000             0.02506885"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"stats-custom","dir":"Articles","previous_headings":"Regional statistics","what":"Regional stats for weeks and custom time periods","title":"eBird Status Data Products Applications","text":"eBird Status Data Products include seasonal raster layers derived weekly rasters based expert defined seasons. seasonal layers convenient work , however, cases may want estimate proportion population within region weekly level custom time period. example, let’s estimate proportion North American population within California week month January. example, ’ll use lower, 27 km resolution data interest speed, since 3 km weekly data can quite slow process. ’ll start estimating weekly proportion North American population following approach similar previous section. data frame gives weekly proportion North American population Golden Eagle California; structure similar data generated migration chronology section. can take one step average proportion population across weeks month January.","code":"# weekly relative abundance, masked to north america abd_weekly_noram <- load_raster(\"goleag\",                                  product = \"abundance\",                                  resolution = \"27km\") |>    mask(noram)  # total north american relative abundance for each week abd_weekly_total <- global(abd_weekly_noram, fun = \"sum\", na.rm = TRUE)  # proportion of north american population prop_pop_weekly_noram <- abd_weekly_noram / abd_weekly_total$sum  # proportion of weekly population in california california <- filter(states, state == \"California\") cali_prop_noram_pop <- extract(prop_pop_weekly_noram, california,                                 fun = \"sum\", na.rm = TRUE,                                 weights = TRUE, ID = FALSE) prop_pop_weekly_noram <- data.frame(   week = as.Date(names(cali_prop_noram_pop)),   prop_pop = as.numeric(cali_prop_noram_pop[1, ])) head(prop_pop_weekly_noram) #>         week   prop_pop #> 1 2022-01-04 0.05982915 #> 2 2022-01-11 0.05356687 #> 3 2022-01-18 0.05547690 #> 4 2022-01-25 0.05428955 #> 5 2022-02-01 0.05839619 #> 6 2022-02-08 0.06418506 prop_pop_weekly_noram |>    filter(month(week) == 1) |>    summarize(prop_pop = mean(prop_pop)) #>     prop_pop #> 1 0.05579062"},{"path":"https://ebird.github.io/ebirdst/articles/applications.html","id":"stats-coastal","dir":"Articles","previous_headings":"Regional statistics","what":"Coastal species","title":"eBird Status Data Products Applications","text":"one particular case methods presented far regional statistics can cause issues: species significant proportion population offshore tidal areas. Many regional polygons, including Natural Earth used far, capture land area, resulting large proportion non-zero relative abundance cells falling outside polygons. example, let’s estimate proportion global non-breeding season population Surf Scoter Mexico using naive approach used previous examples. According method, 20% non-breeding population Surf Scoter occurs Mexico. However, Surf Scoter exclusively coastal species naive estimate missing large part population coarse boundary Mexico ’re using doesn’t capture many 3 km raster cells falling offshore. can correct buffering Mexico polygon 5 km try capture coastal cells. ’ll also use touches = TRUE include raster cells touched Mexico polygon; without argument, cells whose centers fall within Mexico polygon included. adjustments proportion population increased substantially 20% 33%. approaches perfect care always taken working eBird Status Trends Data Products coastal species.","code":"# download only the season proportion of population layer ebirdst_download_status(\"Surf Scoter\",                          pattern = \"proportion-population_seasonal_mean_3km\")  # breeding season proportion of population abd_nonbreeding <- load_raster(\"Surf Scoter\",                                product = \"proportion-population\",                                period = \"seasonal\") |>    subset(\"nonbreeding\")  # load a polygon for the boundary of Mexico mexico <- ne_countries(country = \"Mexico\") |>    st_transform(crs = st_crs(abd_nonbreeding))  # proportion in mexico extract(abd_nonbreeding, mexico, fun = \"sum\", na.rm = TRUE) #>   ID nonbreeding #> 1  1   0.2049178 # buffer by 5000m = 5km mexico_buffer <- st_buffer(mexico, dist = 5000)  # proportion in mexico extract(abd_nonbreeding, mexico_buffer, fun = \"sum\", na.rm = TRUE,         touches = TRUE) #>   ID nonbreeding #> 1  1   0.3336408"},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"changelog","dir":"Articles","previous_headings":"","what":"2022 Changelog","title":"eBird Status and Trends Data Products Changelog","text":"Data Version: 2022 (available November 2023) Fink, D., T. Auer, . Johnston, M. Strimas-Mackey, S. Ligocki, O. Robinson, W. Hochachka, L. Jaromczyk, C. Crowley, K. Dunham, . Stillman, . Davies, . Rodewald, V. Ruiz-Gutierrez, C. Wood. 2023. eBird Status Trends, Data Version: 2022; Released: 2023. Cornell Lab Ornithology, Ithaca, New York. https://doi.org/10.2173/ebirdst.2022","code":""},{"path":[]},{"path":[]},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"ebird-checklists","dir":"Articles","previous_headings":"2022 Changelog > Status > Data Inputs","what":"eBird Checklists","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: Checklists included January 1 2008 December 31 2022, updated January 1 2007 December 31 2021. CHANGED: Checklists 30 km length now included species run ocean (e.g., Northern Gannet). CHANGED: Checklists duration less 0.0167 hours (1 minute) dropped. primarily checklists incorrect duration information. CHANGED: Checklist centroids derived tracks now calculated using great circle distance, sinusoidal distance. CHANGED: maximum allowable number observers checklist 50. checklists dropped.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"effort-covariates","dir":"Articles","previous_headings":"2022 Changelog > Status > Data Inputs","what":"Effort Covariates","title":"eBird Status and Trends Data Products Changelog","text":"ADDED: Rate (kilometers per hour) added effort covariate. Prediction made value 2 kmph, units duration 1 hour distance 2 kilometers. range boundary prediction, rate set result effort_hrs effort_distance_km maximized partial dependence values separately. FIXED: Rainfall Snowfall bug resulted often 0s, due precision errors. corrected tested. CHANGED: CCI Summary: main changes calculation CCI kind model fit checklist species richness using predictive features, deviations model predictions attributed particular observers checklists. Details foundation CCI predictive model checklist-level species richness (\\(S\\); .e. number species). updating CCI, changes made form predictive model \\(S\\) method attributes variation richness particular observers. Prior Version 2022, predictive features comprised weather, landcover, habitat diversity, protocol, day year, variables particular observer: observer_id checklist_number (.e., index many checklists user ever submitted stixel eBird; confused checklist_id). mixed-effects generalized additive model (GAM) fit \\(S\\). GAM used predictive features natural log checklist_number, smooth spline solar_noon_diff, raw values predictors, random effect specification observer_id checklist_number. model used make predictions \\(p_{}\\) \\(S\\) data representing “standardized search”, features except observer_id checklist_number held constant (column-wise mean) across observations. CCI derived variation resulting predictions, scaled mean 0 variance 1. \\[ CCI_{} = \\\\(pi - mean(p)\\\\) / sd(p) \\] Version 2022 changed functional form predictive model (mostly) linear mixed-effects model random forest. , removed observer_id checklist_number suite predictive features; model now blind person-specific effects. Instead, predictions real data absent personal information establish conditional expectations richness given habitat, effort, weather, etc. expected value parameterizes Poisson distribution, used compute exceedance probability actually-observed S, mapped standard-normal quantile. GAM “factor smooth” basis checklist_number observer_id applied smooth raw values observer. CCI currently comprises smoothed values.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"environmental-covariates","dir":"Articles","previous_headings":"2022 Changelog > Status > Data Inputs","what":"Environmental Covariates","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: Covariate assignment now uses proper circular buffers neighborhood calculations (1.5 km radius) instead previously used sinusoidal buffer, many locations high skew across globe. ADDED: Information moon added using two covariates R suncalc package. Moon fraction represents fraction disk moon illuminated given time location Moon altitude represents altitude moon (horizon, radians) given location time. ADDED: Joint Research Center Global Surface Water data added yearly variables, representing binary presence either seasonal permanent water (JRC/GSW1_4/YearlyHistory), calculated percent land cover edge density within neighborhood. dataset 30 m spatial resolution. ADDED: Elevation data 30 m resolution added ASTER Global Digital Elevation Model. represented mean standard deviation within neighborhoods. ADDED: MODIS 16-day Enhanced Vegetation Index (EVI) added MOD13Q1. summarized mean standard deviation within neighborhoods. dataset available water artificial boundary northern southern latitudes based availability light, added boolean covariate has_evi describes whether covariate available given date location. ADDED: Data describing shorelines Sayre et al. 2021 included. includes means standard deviations : wave height, tidal range, chlorophyll, turbidity, sinuosity, slope, outflow density; class densities (km coast per square km area neighborhood) four classes erodibility, class densities (km coast per square km area neighborhood) 23 Ecological Marine Units (EMUs) describe sea surface temperature, salinity, dissolved oxygen, well covariates describing unique number erodibility EMU classes neighborhood. EVI, included boolean has_shoreline covariate, shoreline covariates spatially exhaustive, describing whether covariate available given location. UPDATED: MCD12Q1 LCCS land cover, land use, hydrology data updated version 6.1.","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"base-model","dir":"Articles","previous_headings":"2022 Changelog > Status > Workflow and Code Changes","what":"Base Model","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: migrants residents use circularized time covariates day year, sine cosine day normalized within stixel. CHANGED: binary presence/absence occurrence threshold base model level now uses mccf1, replacing Cohen’s Kappa.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"prediction","dir":"Articles","previous_headings":"2022 Changelog > Status > Workflow and Code Changes","what":"Prediction","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: calendar dates grid prediction changed result converting prediction values integers (formerly included fractional day information). CHANGED: prediction values effort_distance_km effort_hrs set 90th quantiles making predictions determine range boundary. Previously chosen maximize partial dependence (PD) curve. CHANGED: prediction values CCI time day (solar_noon_diff) now chosen maximize abundance partial dependence (PD) constrained values species detected. Previously chosen using occurrence partial dependence curve constrained detections. -CHANGED: maximizing prediction value CCI stixel level, allowable range values now 0-2, 0-1.85, based range new version CCI values overall. CHANGED: prediction value effort_distance_km now 2 km, closely reflect distribution checklists increase overall signal. CHANGED: weather optimization arise now done relative abundance, occurrence. CHANGED: PD maximization solar_noon_diff allows full range quantiles allow selection highest lowest quantile values often nocturnal. Previously outermost quantile values allowed selection.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"ensemble","dir":"Articles","previous_headings":"2022 Changelog > Status > Workflow and Code Changes","what":"Ensemble","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: replacement base model binary presence/absence occurrence threshold MCC-F1, ensemble level percent threshold (PAT) cutoff value fixed 0.14 (interpreted species found least week). ADDED: ensemble support calculation, new product added, spatial coverage. represents fraction 3 km grid cell-weeks checklists within given stixel, averaged across ensemble (essentially spatial smooth. weekly layer used mask predictions species values spatial coverage value 0.00025. helps control extrapolation places like Russia central Africa. CHANGED: ensemble support site selection probability now 0 unsampled islands. CHANGED: ensemble support-based site selection probability mask changed 0.0025. Ocean run species longer use site selection probability mask.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"data-products","dir":"Articles","previous_headings":"2022 Changelog > Status > Workflow and Code Changes","what":"Data Products","title":"eBird Status and Trends Data Products Changelog","text":"UPDATED: prediction definition now: {occurrence, count, relative abundance} individuals given species detected expert eBirder 1 hour, 2 kilometer traveling checklist optimal time day. Predictions optimized user skill, hourly weather moon conditions, specific given region, season, species, order maximize detection rates. REMOVED: Partial dependence values longer calculated distributed.","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"covariates","dir":"Articles","previous_headings":"2022 Changelog > Trends","what":"Covariates","title":"eBird Status and Trends Data Products Changelog","text":"ADDED: New modified Status covariates added trends model. New covariates include speed (distance / duration), moon fraction altitude, shoreline, 30 m elevation. CHANGED: Water cover now represented static ASTER water bodies dataset instead annual MODIS MOD44W dataset.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"ensemble-1","dir":"Articles","previous_headings":"2022 Changelog > Trends","what":"Ensemble","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: residual confounding adjustment now spatially​explicit adjustment, calculated applied separately pixel. Regions, Years, Seasons CHANGED: Trends regions now variable start years, trends now run shorter time series, ensure years time series sufficient data model trends. example, North American trends now start 2012 rather 2007. CHANGED: Seasonal dates Trends now identical Status seasonal dates. CHANGED: species trends estimated season crossing year end (e.g. December January), time series shifted back one year ensure number years trend species given region. example, North American breeding trend (e.g. May June) 2012 2022, non-breeding trend (e.g. December January) 2011/12 2021/22.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"web-products","dir":"Articles","previous_headings":"2022 Changelog > Trends","what":"Web Products","title":"eBird Status and Trends Data Products Changelog","text":"ADDED: Regional trends CIs.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"data-products-1","dir":"Articles","previous_headings":"2022 Changelog > Trends","what":"Data Products","title":"eBird Status and Trends Data Products Changelog","text":"ADDED: Trends data released first time year. Web download include GeoPackages abundance-scaled trend circles. R package download include ensemble-level trend estimates well fold-level estimates.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"changelog-1","dir":"Articles","previous_headings":"","what":"2021 Changelog","title":"eBird Status and Trends Data Products Changelog","text":"Data Version: 2021 (available November 2022) Fink, D., T. Auer, . Johnston, M. Strimas-Mackey, S. Ligocki, O. Robinson, W. Hochachka, L. Jaromczyk, . Rodewald, C. Wood, . Davies, . Spencer. 2022. eBird Status Trends, Data Version: 2021; Released: 2022. Cornell Lab Ornithology, Ithaca, New York. https://doi.org/10.2173/ebirdst.2021","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"ebird-checklists-1","dir":"Articles","previous_headings":"2021 Changelog > Data Inputs","what":"eBird Checklists","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: checklists included January 1 2007 December 31 2021, updated January 1 2006 December 31 2020. CHANGED: Observations reported escapees new eBird exotic species protocols excluded analysis.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"environmental-covariates-1","dir":"Articles","previous_headings":"2021 Changelog > Data Inputs","what":"Environmental Covariates","title":"eBird Status and Trends Data Products Changelog","text":"UPDATED: Data 2020 added primary land cover data source, MCD12Q1.","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"general","dir":"Articles","previous_headings":"2021 Changelog > Workflow and Code Changes","what":"General","title":"eBird Status and Trends Data Products Changelog","text":"ADDED: Prediction grid locations ocean now available choice model species land water.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"spatiotemporal-partitioning","dir":"Articles","previous_headings":"2021 Changelog > Workflow and Code Changes","what":"Spatiotemporal Partitioning","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: adaptive partitioning algorithm (AdaSTEM) now grid samples training data stixels defined. CHANGED: projection initialization stixel iteration now fully randomized, previously constrained keep boundaries ocean. CHANGED: Stixels now allowed recurse one size smaller, approximately 90km side, remain one size larger (3000km side), except resident-specific stixels maximum remains 1500km side, computational reasons. CHANGED: now separate AdaSTEM partitioning residents uses full year data instead 28 day window. training data partitions also grid sampled definition. stixel parameters set maximum 65,000 checklists per stixel full year, grid sampling, minimum 6,500 checklists per stixel (e.g., stixels allowed subdivided contain less amount).","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"model-ensemble","dir":"Articles","previous_headings":"2021 Changelog > Workflow and Code Changes","what":"Model Ensemble","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: Models now run 200 replicates (folds). CHANGED: percent threshold (PAT) cutoff replaced data-driven maximization MCC-F1 curve (https://arxiv.org/abs/2006.11278), constrained 0.05 0.25. training data grid sampled optimizing using MCC-F1 curve 25 realizations done taking median PAT value. migrants, done weekly, residents across whole year. CHANGED: process selecting ensemble support cutoff threshold (number models required show predictions) updated training data grid sampled first, optimized true positive rate 99%, cutoff constrained 0.5 0.9. migrants, done weekly, residents across whole year. process done 25 times median threshold value selected. CHANGED: site selection probability layer significantly improved. binary classification model, prediction grid locations >= 50% overlapped 1.5km buffer checklist locations removed. resolves previous, erroneously low values dense, urban areas accurately reflects true probability site selection areas. change impacts species estimates places site selection probability value less 0.5%, species estimates masked.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"base-model-1","dir":"Articles","previous_headings":"2021 Changelog > Workflow and Code Changes","what":"Base Model","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: grid sample method now retains unique values factor variables (e.g., island). CHANGED: grid sampler oversamples detections achieve 25% detection probability training dataset. Previously grid sampler often overshoot 25% target excessively duplicate detections. corrected oversampling never yields detection probabilities greater 25% detections duplicated 25 times. CHANGED: Mean spatial coverage stixel now correctly estimated proportion 3 km pixels contain checklists.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"fit-and-predict","dir":"Articles","previous_headings":"2021 Changelog > Workflow and Code Changes","what":"Fit and Predict","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: Maximization partial dependencies prediction (e.g., CCI) longer allows selection highest lowest extreme quantile values, prevent extrapolation.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"residents","dir":"Articles","previous_headings":"2021 Changelog > Workflow and Code Changes","what":"Residents","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: Along resident-specific AdaSTEM partitioning, resident models now predict weeks year single stixel. Previously, resident models used data whole year training, predicted four weeks stixel, similar way migrants modeled.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"data-products-2","dir":"Articles","previous_headings":"2021 Changelog > Workflow and Code Changes","what":"Data Products","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: occurrence model prediction values effort variables now set 1 hour 1 kilometer. Previously, effort variable values used occurrence model prediction used occurrence model, sought maximize detection optimizing distance duration effort variables capture much signal possible, 12 hours (6 hours version) 10 kilometers. prediction values retained presence/absence estimation. CHANGED: prediction value Checklist Calibration Index (CCI) now maximized within stixel using partial dependencies. Previously, value set fixed value 1.85 species stixels. CHANGED: Partial dependencies now generated first 50 folds, reduce computational cost. CHANGED: show “year-round” seasonal map now requires 0.1% overlap breeding non-breeding seasons. Previously, four seasons overlap greater 5% required. REMOVED: Habitat plots numerical summaries removed website.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"changelog-2","dir":"Articles","previous_headings":"","what":"2020 Changelog","title":"eBird Status and Trends Data Products Changelog","text":"Data Version: 2020 (available Fall 2021) Fink, D., T. Auer, . Johnston, M. Strimas-Mackey, O. Robinson, S. Ligocki, W. Hochachka, L. Jaromczyk, C. Wood, . Davies, M. Iliff, L. Seitz. 2021. eBird Status Trends, Data Version: 2020; Released: 2021. Cornell Lab Ornithology, Ithaca, New York. https://doi.org/10.2173/ebirdst.2020","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"ebird-checklists-2","dir":"Articles","previous_headings":"2020 Changelog > Data Inputs","what":"eBird Checklists","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: checklists included January 1 2006 December 31 2020, updated January 1 2005 April 15 2020. CHANGED: species now use data globally run spatial subsets. Previously, primarily Western Hemisphere species run spatial extent. CHANGED: checklists using Stationary protocol now include tracks used long distance track protocol type less 700 meters. CHANGED: spatial location checklists eBird Hotspots changed user-reported location centroid tracks associated hotspot. FIXED: Previously, historical checklists lacked complete effort information included. now excluded.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"environmental-covariates-2","dir":"Articles","previous_headings":"2020 Changelog > Data Inputs","what":"Environmental Covariates","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: SRTM15+ ~250m elevation bathymetry replaces ~1 kilometer SRTM30+ elevation bathymetry product. CHANGED: single year Nighttime Lights replaced -year assignment 2014-2020 using EOG Annual VNL v2 product. CHANGED: Global Intertidal Change dataset updated version 1.2 includes new three-year time step covering 2017 2019. CHANGED: Continents now unique identifiers island categorization. Previously, continents treated “mainland” value. ADDED: Hourly weather variables assigned 30 kilometer spatial resolution using Copernicus ERA5 reanalysis product. ADDED: 90m eastness northness (combined slope aspect) topographic variables Amatulli et al. 2020 included addition 1 kilometer eastness northness. FIXED: Source data updated 2017-2019 MCD12Q1 reported classification errors.","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"spatiotemporal-partitioning-1","dir":"Articles","previous_headings":"2020 Changelog > Workflow and Code Changes","what":"Spatiotemporal Partitioning","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: adaptive partitioning algorithm (AdaSTEM) now uses Icosahedron Gnomic projection generates partitions largely conformal stixel boundaries across globe. CHANGED: temporal width AdaSTEM partitions changed 30.5 days 28 days.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"model-ensemble-1","dir":"Articles","previous_headings":"2020 Changelog > Workflow and Code Changes","what":"Model Ensemble","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: percent threshold (PAT) cutoff 3km grid cells reported present changed 0.1 0.143, accommodate increased occurrence rates result including hourly weather account variation detection rates.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"resident-methodology","dir":"Articles","previous_headings":"2020 Changelog > Workflow and Code Changes","what":"Resident Methodology","title":"eBird Status and Trends Data Products Changelog","text":"stixel loads full year training test data, just 28 day window associated given stixel. DAY predictor encoding cyclically using sin cosin transformation allow model wrap year. spatiotemporal grid sampling now seeks maximum sample size 65,000 checklists given stixel (migrants value 5,000).","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"data-products-3","dir":"Articles","previous_headings":"2020 Changelog > Workflow and Code Changes","what":"Data Products","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: count model prediction values effort variables now set 1 hour 1 kilometer. Previously, effort variables used count model prediction used occurrence model, sought maximize detection optimizing distance duration effort variables capture much signal possible, 12 hours (6 hours version) 10 kilometers. CHANGED: Zeroes data products outside prediction area species (also known assumed zeroes) now require, average, across -100 models ensemble, 0.5% 3km grid cells filled least 1 checklist given week reported zero. Previously, 0.1% 3km grid cells. adjusted offer appropriately conservative representation absence can assumed based overall data volume. ADDED: Locations (3km grid cells) less 0.5% mean site selection probability now masked final data products reported NA. Mean site selection probability calculated weekly species-agnostic AdaSTEM workflow estimates probability location given habitat configuration visited given region season. ADDED: Spatial representations predictive performance metrics individual model-level summaries generated 27km GeoTIFFs week year. spatialization done assigning stixel-level values every 27km grid cell within stixel averaging across stixels determine regional metrics. FIXED: Caspian Sea now masked data products. CHANGED: Raw test data receive model predictions removed calculation predictive performance metrics. Previously, type test data used form assumed absence calculation binary predictive performance metrics. ADDED: Predictions 3km grid cells now include standardization hourly weather within individual model. hourly weather values set prediction based maximization occurrence estimates 80th 90th percentiles. CHANGED: Calculation individual model partial dependencies now uses train bag data. Previously, train bag data used. ADDED: Predictor Importance Partial Dependency products now included occurrence rate count models. Previously, products available occurrence rate model. CHANGED: time covariate used models, calculated difference local checklist time solar noon checklist location, changed use temporal midpoint checklist calculation. Previously, time start checklist used calculation. FIXED: temporal centroid individual models, used predictor importance partial dependencies, changed represent mean date train bag data. Previously, mean train, test, four weeks 3km grid cell location data. CHANGED: Regional habitat association charts based weighted summary stixel-level predictor importance partial dependence estimates, weighting determined proportion region covered stixel. Previously, stixel centroids used determine set stixels contributing given region, crude approximations stixels rectangles lat-lon coordinates used determine overlap-based weighting. Now, exact stixel shape used calculating regional habitat associations, considering exact set 27km grid cells falling within stixel, determine set stixels used habitat summarization overlap-based weighting given region. CHANGED: Habitat regional abundance range statistical summaries now computed species, globally, using Natural Earth Data Admin 1 data summarization.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"expert-review","dir":"Articles","previous_headings":"2020 Changelog > Workflow and Code Changes","what":"Expert Review","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: Animations longer reviewed resident species.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"changelog-3","dir":"Articles","previous_headings":"","what":"2019 Changelog","title":"eBird Status and Trends Data Products Changelog","text":"Data Version: 2019 (available Fall 2020) Fink, D., T. Auer, . Johnston, M. Strimas-Mackey, O. Robinson, S. Ligocki, W. Hochachka, C. Wood, . Davies, M. Iliff, L. Seitz. 2020. eBird Status Trends, Data Version: 2019; Released: 2020. Cornell Lab Ornithology, Ithaca, New York. https://doi.org/10.2173/ebirdst.2019","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"ebird-checklists-3","dir":"Articles","previous_headings":"2019 Changelog > Data Inputs","what":"eBird Checklists","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: Checklists included January 1, 2005 April 15, 2020, updated January 1, 2014 December 31, 2018. ADDED: Include checklists International Shorebird Survey (ISS) complete shorebird species. CHANGED: Checklists “slashes” (representing two similar species) non-zero now child species set “X” (present-, count info). FIXED: Subspecies always roll species-level correctly.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"environmental-covariates-3","dir":"Articles","previous_headings":"2019 Changelog > Data Inputs","what":"Environmental Covariates","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: ASTER Global Water Bodies Database 30m ocean, river, lakes replaces MOD44W 500m resolution, land water classification, ran 2015. ADDED: GLOBIO Global Roads Inventory Project (GRIP) road density (m/km2) five classes roads.","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"spatiotemporal-partitioning-2","dir":"Articles","previous_headings":"2019 Changelog > Workflow and Code Changes","what":"Spatiotemporal Partitioning","title":"eBird Status and Trends Data Products Changelog","text":"CHANGED: adaptive partitioning algorithm (AdaSTEM) now uses projected coordinates (sinusoidal) meters instead unprojected coordinates degrees. CHANGED: AdaSTEM partitions now 1500 kilometers side largest 187 kilometers side smallest. CHANGED: AdaSTEM rules now split partitions contain 16,000 checklists larger 1500 kilometers side. CHANGED: AdaSTEM now reverts individual partitions back next largest size partition children contain less 500 checklists mostly open water. Partitions never allowed revert back partitions 1500 kilometers side.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"model-ensemble-2","dir":"Articles","previous_headings":"2019 Changelog > Workflow and Code Changes","what":"Model Ensemble","title":"eBird Status and Trends Data Products Changelog","text":"ADDED: Individual models now report 0 predictions training data set contains less 10 positive observations species mean spatial coverage within model greater equal 5%. CHANGED: Range boundaries now set weekly highest level ensemble support, 50% 95% models, including least 99.5% positive observations, changed fixed 75% models previous versions. CHANGED: Zeroes data products outside prediction area species (also known assumed zeroes) now based mean spatial coverage checklists within areas. locations species-specific models report zero non-zero predictions, locations need , average, across -100 models ensemble, 0.1% 3km grid cells filled least 1 checklist given week reported zero. Previously, locations required 95% models given location least 50 complete checklists given week.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"seasonal-products","dir":"Articles","previous_headings":"2019 Changelog > Workflow and Code Changes","what":"Seasonal Products","title":"eBird Status and Trends Data Products Changelog","text":"ADDED: averaging weekly estimates represent resident species, reviewers select subset weeks, opposed previously averaged entire year.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"data-products-4","dir":"Articles","previous_headings":"2019 Changelog > Workflow and Code Changes","what":"Data Products","title":"eBird Status and Trends Data Products Changelog","text":"ADDED: now 184 species modeled fully global extent. overall species total now 807.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/product-changelog.html","id":"expert-review-1","dir":"Articles","previous_headings":"2019 Changelog > Workflow and Code Changes","what":"Expert Review","title":"eBird Status and Trends Data Products Changelog","text":"ADDED: Expert reviewers now assign quality scores full-year, animations, seasons.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/status.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Introduction to eBird Status Data Products","text":"study conservation natural world relies detailed information distributions, abundances, population trends species time. many taxa, information challenging obtain relevant geographic scales. goal eBird Status Trends project use data eBird, global community science bird monitoring program administered Cornell Lab Ornithology, generate reliable, standardized source biodiversity information world’s bird populations. translate eBird observations robust data products, use machine learning fill spatiotemporal gaps, using local land cover descriptions derived remote sensing data, controlling biases inherent species observations collected community scientists. See Fink et al. (2019) information analysis used generate data. vignette gives overview eBird Status Data Products, estimate full annual cycle distributions, relative abundances, habitat associations rscales::comma(nrow(ebirdst::ebirdst_runs) - 1)` species year 2022. species, distribution abundance estimates available 52 weeks year across regular 3 km 3 km square grid cells covering globe. Variation detectability associated search effort controlled standardizing estimates expected occurrence rate count species 1 hour, 2 km checklist expert eBird observer optimal time day optimal weather conditions detecting species.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/status.html","id":"access","dir":"Articles","previous_headings":"","what":"Data access","title":"Introduction to eBird Status Data Products","text":"Data access granted Access Request Form : https://ebird.org/st/request. Filling form generates key used R package. terms use designed quite permissive many cases, particularly academic research use. requesting data access, please sure carefully read terms use ensure intended use restricted. completing Access Request Form, provided eBird Status Trends Data Products access key, need downloading data. store key package can access downloading data, use function set_ebirdst_access_key(\"XXXXX\"), \"XXXXX\" access key provided . wide variety data products available download ebirdst via function ebirdst_download_status(). first argument function defines species (common name, scientific name, species code) download data remaining arguments define specific data products download. Throughout vignettes, ’ll use simplified example dataset consisting estimates Yellow-bellied Sapsucker Michigan. dataset designed small faster download accessible without key. default ebirst_download_status() downloads commonly used data products; however, since vignette cover available data products, ’ll use download_all = TRUE. Note data species example dataset requires key access. default, ebirdst_download_status() downloads data centralized directory computer. can see directory function ebirdst_data_dir() can change default download directory setting environment variable EBIRDST_DATA_DIR, example calling usethis::edit_r_environ() adding line EBIRDST_DATA_DIR=/custom/download/directory/. IMPORTANT: eBird Status Trends Data Products designed downloaded accessed using ebirdst R package. Data downloaded using R package specific file structure changing file names locations disrupt ability functions package access data. prefer access data use outside R, consider downloading data via eBird Status Trends website.","code":"library(dplyr) library(sf) library(terra) library(ebirdst)  # download a simplified example dataset for Yellow-bellied Sapsucker in Michigan ebirdst_download_status(species = \"yebsap-example\", download_all = TRUE)"},{"path":"https://ebird.github.io/ebirdst/articles/status.html","id":"species","dir":"Articles","previous_headings":"","what":"Species list","title":"Introduction to eBird Status Data Products","text":"data frame ebirdst_runs lists species eBird Status Data Products available download. ’re working RStudio, can use View() interactively explore data frame. species go process review expert species prior released. ebirdst_runs data frame contains information review process. migrants, reviewers assess model estimates four seasons: breeding, non-breeding, pre-breeding migration, post-breeding migration. Resident (.e., non-migratory) species identified TRUE is_resident column ebirdst_runs, species assessed across whole year rather seasonally. ebirdst_runs contains two important pieces information season: quality rating seasonal dates. seasonal dates define weeks fall within season. Breeding non-breeding season dates defined species weeks seasons species’ population move. reason, seasons also described stationary periods. Migration periods defined periods movement stationary non-breeding breeding seasons. Note many species migratory periods include movement breeding grounds non-breeding grounds, also post-breeding dispersal, molt migration, movements. Reviewers also examine model estimates season assess amount extrapolation omission present model, assign associated quality rating ranging 0 (lowest quality) 3 (highest quality). Extrapolation refers cases model predicts occurrence species known absent, omission refers model failing predict occurrence species known present. rating 0 implies season failed review model results used period. Ratings 1-3 correspond gradient less extrapolation /omission, often use traffic light analogy referring : Red light (1): low quality, extensive extrapolation /omission noise, least regions estimates accurate; can used caution certain regions. Yellow light (2): medium quality, extrapolation /omission; use caution. Green light (3): high quality, little extrapolation /omission; seasons can safely used. Let’s look results review example dataset. , can see Yellow-bellied Sapsucker modeled migrant four seasons received quality 3, highest rating. Note variety trends-specific columns end data frame ’ll ignore now; columns covered trends vignette","code":"glimpse(ebirdst_runs) #> Rows: 1,118 #> Columns: 28 #> $ species_code                   <chr> \"abetow\", \"acafly\", \"acowoo\", \"affeag1\"… #> $ scientific_name                <chr> \"Melozone aberti\", \"Empidonax virescens… #> $ common_name                    <chr> \"Abert's Towhee\", \"Acadian Flycatcher\",… #> $ is_resident                    <lgl> TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, F… #> $ breeding_quality               <chr> NA, \"3\", NA, NA, \"3\", NA, \"1\", \"3\", NA,… #> $ breeding_start                 <date> NA, 2022-05-24, NA, NA, 2022-06-21, NA… #> $ breeding_end                   <date> NA, 2022-08-02, NA, NA, 2022-07-12, NA… #> $ nonbreeding_quality            <chr> NA, \"3\", NA, NA, \"1\", NA, \"1\", \"3\", NA,… #> $ nonbreeding_start              <date> NA, 2022-12-06, NA, NA, 2022-11-15, NA… #> $ nonbreeding_end                <date> NA, 2022-02-15, NA, NA, 2022-03-29, NA… #> $ postbreeding_migration_quality <chr> NA, \"3\", NA, NA, \"3\", NA, \"1\", \"3\", NA,… #> $ postbreeding_migration_start   <date> NA, 2022-08-09, NA, NA, 2022-07-19, NA… #> $ postbreeding_migration_end     <date> NA, 2022-11-29, NA, NA, 2022-11-08, NA… #> $ prebreeding_migration_quality  <chr> NA, \"3\", NA, NA, \"3\", NA, \"2\", \"3\", NA,… #> $ prebreeding_migration_start    <date> NA, 2022-02-22, NA, NA, 2022-04-05, NA… #> $ prebreeding_migration_end      <date> NA, 2022-05-17, NA, NA, 2022-06-14, NA… #> $ resident_quality               <chr> \"3\", NA, \"3\", \"2\", NA, \"2\", NA, NA, \"3\"… #> $ resident_start                 <date> 2022-01-04, NA, 2022-01-04, 2022-01-04… #> $ resident_end                   <date> 2022-12-27, NA, 2022-12-27, 2022-12-27… #> $ has_trends                     <lgl> TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FA… #> $ trends_season                  <chr> \"resident\", \"breeding\", \"resident\", NA,… #> $ trends_region                  <chr> \"north_america\", \"north_america\", \"nort… #> $ trends_start_year              <dbl> 2012, 2012, 2011, NA, 2012, 2015, NA, 2… #> $ trends_end_year                <dbl> 2022, 2022, 2021, NA, 2022, 2022, NA, 2… #> $ trends_start_date              <chr> \"01-25\", \"05-24\", \"11-01\", NA, \"06-21\",… #> $ trends_end_date                <chr> \"05-10\", \"08-02\", \"05-03\", NA, \"07-12\",… #> $ rsquared                       <dbl> 0.9231821, 0.8570363, 0.8805367, NA, 0.… #> $ beta0                          <dbl> -0.013923012, 0.689424792, -0.092670714… ebirdst_runs %>%    filter(species_code == \"yebsap-example\") %>%    glimpse() #> Rows: 1 #> Columns: 28 #> $ species_code                   <chr> \"yebsap-example\" #> $ scientific_name                <chr> \"Sphyrapicus varius\" #> $ common_name                    <chr> \"Yellow-bellied Sapsucker\" #> $ is_resident                    <lgl> FALSE #> $ breeding_quality               <chr> \"3\" #> $ breeding_start                 <date> 2022-05-24 #> $ breeding_end                   <date> 2022-08-16 #> $ nonbreeding_quality            <chr> \"3\" #> $ nonbreeding_start              <date> 2022-11-15 #> $ nonbreeding_end                <date> 2022-03-08 #> $ postbreeding_migration_quality <chr> \"3\" #> $ postbreeding_migration_start   <date> 2022-08-23 #> $ postbreeding_migration_end     <date> 2022-11-08 #> $ prebreeding_migration_quality  <chr> \"3\" #> $ prebreeding_migration_start    <date> 2022-03-15 #> $ prebreeding_migration_end      <date> 2022-05-17 #> $ resident_quality               <chr> NA #> $ resident_start                 <date> NA #> $ resident_end                   <date> NA #> $ has_trends                     <lgl> TRUE #> $ trends_season                  <chr> \"breeding\" #> $ trends_region                  <chr> \"north_america\" #> $ trends_start_year              <dbl> 2012 #> $ trends_end_year                <dbl> 2022 #> $ trends_start_date              <chr> \"05-24\" #> $ trends_end_date                <chr> \"08-16\" #> $ rsquared                       <dbl> 0.8572896 #> $ beta0                          <dbl> 0.2270008"},{"path":"https://ebird.github.io/ebirdst/articles/status.html","id":"types","dir":"Articles","previous_headings":"","what":"Data types","title":"Introduction to eBird Status Data Products","text":"species, variety data products available, can categorized following broad types: Weekly raster estimates: weekly estimates occurrence, count, relative abundance, proportion population regular grid GeoTIFF format three resolutions. core products products derivied. Seasonal raster estimates: seasonal estimates occurrence, count, relative abundance, proportion population regular grid GeoTIFF format three resolutions. derived corresponding weekly raster data summarizing across weeks falling within season based dates defined ebirdst_runs data frame. seasons passed expert review process included. Seasonal range boundaries: seasonal range boundary polygons GeoPackage format. Regional summary statistics: variety summary statistics countries states/provinces (e.g. proportion total population region) CSV format. data products covered detail following sections, including details load data R. loading functions take species (given common name, scientific name, species code) first argument. used non-default path argument ebirdst_download_status() also need provide path argument loading functions.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/status.html","id":"weekly-raster-estimates","dir":"Articles","previous_headings":"Data types","what":"Weekly raster estimates","title":"Introduction to eBird Status Data Products","text":"core raster data products weekly estimates occurrence, count, relative abundance, percent population. stored widely used GeoTIFF raster format, refer “weekly cubes” (e.g. “weekly abundance cube”). cubes 52 weeks cover entire globe, even species ranges covering small region. come areas predicted assumed zeroes, cells NA represent areas didn’t produce model estimates. estimates median expected value 2 km, 1 hour eBird Traveling Count expert eBird observer optimal time day optimal weather conditions observe given species. Occurrence: expected probability encountering species. Count: expected count species, conditional occurrence given location. Relative abundance: expected relative abundance species, computed product probability occurrence count conditional occurrence. addition median relative abundance, upper lower confidence intervals (CIs) provided, defined 10th 90th quantile relative abundance, respectively. Proportion population: proportion total relative abundance within cell. derived product calculated dividing cell value relative abundance raster sum cell values predictions made standard 3 km 3 km global grid; however, convenience lower resolution GeoTIFFs also provided, typically much faster work . However, note keep file sizes small, example dataset contains lowest (27 km) resolution data. three resolutions : High resolution (3km): native 3 km resolution data. Medium resolution (9km): 3 km resolution data aggregated factor 3 direction resulting resolution 9 km. Low resolution (27km): 3 km resolution data aggregated factor 9 direction resulting resolution 27 km. function load_raster() used load data R takes arguments product resolution. metric argument can also used access relative abundance CIs. raster products loaded R SpatRaster objects use terra R package. example, object 52 layers, one week year, layer names store dates corresponding midpoints week. GeoTIFFs use Sinusoidal projection NASA MODIS data. projection ideal analysis, equal projection, ideal mapping since introduces significant distortion.","code":"# weekly, 27km res, median relative abundance abd_lr <- load_raster(\"yebsap-example\", product = \"abundance\",                        resolution = \"27km\")  # weekly, 27km res, median proportion of population prop_pop_lr <- load_raster(\"yebsap-example\", product = \"proportion-population\",                        resolution = \"27km\")  # weekly, 27km res, abundance confidence intervals abd_lower <- load_raster(\"yebsap-example\", product = \"abundance\", metric = \"lower\",                           resolution = \"27km\") abd_upper <- load_raster(\"yebsap-example\", product = \"abundance\", metric = \"upper\",                           resolution = \"27km\") as.Date(names(abd_lr)) #>  [1] \"2022-01-04\" \"2022-01-11\" \"2022-01-18\" \"2022-01-25\" \"2022-02-01\" #>  [6] \"2022-02-08\" \"2022-02-15\" \"2022-02-22\" \"2022-03-01\" \"2022-03-08\" #> [11] \"2022-03-15\" \"2022-03-22\" \"2022-03-29\" \"2022-04-05\" \"2022-04-12\" #> [16] \"2022-04-19\" \"2022-04-26\" \"2022-05-03\" \"2022-05-10\" \"2022-05-17\" #> [21] \"2022-05-24\" \"2022-05-31\" \"2022-06-07\" \"2022-06-14\" \"2022-06-21\" #> [26] \"2022-06-28\" \"2022-07-05\" \"2022-07-12\" \"2022-07-19\" \"2022-07-26\" #> [31] \"2022-08-02\" \"2022-08-09\" \"2022-08-16\" \"2022-08-23\" \"2022-08-30\" #> [36] \"2022-09-06\" \"2022-09-13\" \"2022-09-20\" \"2022-09-27\" \"2022-10-04\" #> [41] \"2022-10-11\" \"2022-10-18\" \"2022-10-25\" \"2022-11-01\" \"2022-11-08\" #> [46] \"2022-11-15\" \"2022-11-22\" \"2022-11-29\" \"2022-12-06\" \"2022-12-13\" #> [51] \"2022-12-20\" \"2022-12-27\""},{"path":"https://ebird.github.io/ebirdst/articles/status.html","id":"seasonal-raster-estimates","dir":"Articles","previous_headings":"Data types","what":"Seasonal raster estimates","title":"Introduction to eBird Status Data Products","text":"seasonal raster estimates provided set products three resolutions weekly estimates. ’re derived weekly data taking cell-wise mean max across weeks within season. seasonal boundary dates defined process expert review species, available data frame ebirdst_runs. season also given quality score 0 (fail) 3 (high quality), seasons score 0 provided. function load_raster(period = \"seasonal\") used load data R takes arguments product, metric resolution. data loaded R SpatRaster objects use terra package. example, Finally, convenience, data products include year-round rasters summarizing mean max across weeks fall within season passed expert review process. can accessed similarly seasonal products, period = \"full-year\" instead. example, layers can used conservation planning assess important sites across full range full annual cycle species.","code":"# seasonal, 27km res, mean relative abundance abd_seasonal_mean <- load_raster(\"yebsap-example\", product = \"abundance\",                                   period = \"seasonal\", metric = \"mean\",                                   resolution = \"27km\") # season that each layer corresponds to names(abd_seasonal_mean) #> [1] \"breeding\"               \"nonbreeding\"            \"prebreeding_migration\"  #> [4] \"postbreeding_migration\" # just the breeding season layer abd_seasonal_mean[[\"breeding\"]] #> class       : SpatRaster  #> dimensions  : 626, 1502, 1  (nrow, ncol, nlyr) #> resolution  : 26665.26, 26665.28  (x, y) #> extent      : -20015109, 20036111, -6684911, 10007555  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs  #> source      : yebsap-example_abundance_seasonal_mean_27km_2022.tif  #> name        :  breeding  #> min value   : 0.0000000  #> max value   : 0.7763873 # seasonal, 27km res, max occurrence occ_seasonal_max <- load_raster(\"yebsap-example\", product = \"occurrence\",                                  period = \"seasonal\", metric = \"max\",                                  resolution = \"27km\") # full year, 27km res, maximum relative abundance abd_fy_max <- load_raster(\"yebsap-example\", product = \"abundance\",                            period = \"full-year\", metric = \"max\",                            resolution = \"27km\")"},{"path":"https://ebird.github.io/ebirdst/articles/status.html","id":"range-boundaries","dir":"Articles","previous_headings":"Data types","what":"Range boundaries","title":"Introduction to eBird Status Data Products","text":"Seasonal range polygons defined boundaries non-zero seasonal relative abundance estimates, (optionally) smoothed produce aesthetically pleasing polygons using smoothr package. provided widely used GeoPackage format can loaded R load_ranges(), returns set spatial features use sf R package. default smoothed ranges returned, using smoothed = FALSE return raw, unsmoothed range polygons. Note low medium resolution ranges provided. range polygons can loaded load_ranges():","code":"# seasonal, 27km res, smoothed ranges ranges <- load_ranges(\"yebsap-example\", resolution = \"27km\") ranges #> Simple feature collection with 4 features and 8 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -90.41254 ymin: 41.69681 xmax: -82.4146 ymax: 48.19076 #> Geodetic CRS:  WGS 84 #> # A tibble: 4 × 9 #>   species_code scientific_name    common_name       prediction_year type  season #>   <chr>        <chr>              <chr>                       <int> <chr> <chr>  #> 1 yebsap       Sphyrapicus varius Yellow-bellied S…            2022 range breed… #> 2 yebsap       Sphyrapicus varius Yellow-bellied S…            2022 range nonbr… #> 3 yebsap       Sphyrapicus varius Yellow-bellied S…            2022 range postb… #> 4 yebsap       Sphyrapicus varius Yellow-bellied S…            2022 range prebr… #> # ℹ 3 more variables: start_date <date>, end_date <date>, #> #   geom <MULTIPOLYGON [°]> # subset to just the breeding season range using dplyr range_breeding <- filter(ranges, season == \"breeding\")"},{"path":"https://ebird.github.io/ebirdst/articles/status.html","id":"regional-summary-statistics","dir":"Articles","previous_headings":"Data types","what":"Regional summary statistics","title":"Introduction to eBird Status Data Products","text":"Regional summaries seasonal raster estimates also provided standard set regions (countries states/provinces). summary statistics can loaded load_regional_stats(): five summary statistics defined : abundance_mean: mean relative abundance region. total_pop_percent: proportion seasonal modeled population falling within region. range_percent_occupied: proportion region occupied species given season. range_total_percent: proportion species seasonal range falling within region. range_days_occupation: number days season region occupied species.","code":"regional <- load_regional_stats(\"yebsap-example\") glimpse(regional) #> Rows: 8 #> Columns: 10 #> $ species_code           <chr> \"yebsap-example\", \"yebsap-example\", \"yebsap-exa… #> $ region_type            <chr> \"country\", \"country\", \"country\", \"country\", \"st… #> $ region_code            <chr> \"USA\", \"USA\", \"USA\", \"USA\", \"USA-MI\", \"USA-MI\",… #> $ region_name            <chr> \"United States\", \"United States\", \"United State… #> $ season                 <chr> \"breeding\", \"nonbreeding\", \"postbreeding_migrat… #> $ abundance_mean         <dbl> 0.0246, 0.0571, 0.0381, 0.0435, 0.2061, 0.0003,… #> $ total_pop_percent      <dbl> 0.2314, 0.9002, 0.6583, 0.3826, 0.0332, 0.0001,… #> $ range_percent_occupied <dbl> 0.0776, 0.2686, 0.3952, 0.3235, 0.5621, 0.0290,… #> $ range_total_percent    <dbl> 0.1861, 0.7017, 0.6036, 0.4728, 0.0232, 0.0013,… #> $ range_days_occupation  <int> 91, 119, 84, 70, 91, 98, 84, 49"},{"path":"https://ebird.github.io/ebirdst/articles/status.html","id":"references","dir":"Articles","previous_headings":"Data types","what":"References","title":"Introduction to eBird Status Data Products","text":"Fink, D., T. Auer, . Johnston, V. Ruiz‐Gutierrez, W.M. Hochachka, S. Kelling. 2019. Modeling avian full annual cycle distribution population trends citizen science data. Ecological Applications, 00(00):e02056. doi: 10.1002/eap.2056","code":""},{"path":"https://ebird.github.io/ebirdst/articles/trends.html","id":"download","dir":"Articles","previous_headings":"","what":"Downloading data","title":"eBird Trends Data Products","text":"Trends data access granted process eBird Status Data Products. haven’t already requested API key, consult relevant section Introduction eBird Status Data Products vignette. Trends data can downloaded one species using ebirdst_download_trends(), first argument vector common names, scientific names, species codes. Status Data Products, trends data downloaded centralized directory file management access performed via `ebirdst. example, let’s download breeding season trends data Sage Thrasher.","code":"ebirdst_download_trends(\"Sage Thrasher\")"},{"path":"https://ebird.github.io/ebirdst/articles/trends.html","id":"load","dir":"Articles","previous_headings":"","what":"Loading data into R","title":"eBird Trends Data Products","text":"data downloaded, trends data set species, can loaded R using function load_trends(). example, can load Sage Thrasher trends estimates just downloaded : row corresponds trend estimate 27 km 27 km grid cell, identified srd_id column cell center given longitude latitude coordinates. Columns beginning abd_ppy provide estimates percent per year trend relative abundance 80% confidence intervals, beginning abd_trend provide estimates cumulative trend relative abundance 80% confidence intervals time period. abd column gives relative abundance estimate middle trend time period (e.g. 2014 2007-2021 trend). start_year/end_year start_date/end_date columns provide redundant information available ebirdst_runs. Specifically Sage Thrasher : tells us trend estimates breeding season (May 17 July 12) period 2012-2022.","code":"trends_sagthr <- load_trends(\"Sage Thrasher\") trends_runs %>%    filter(common_name == \"Sage Thrasher\") %>%    select(trends_start_year, trends_end_year,          trends_start_date, trends_end_date) #> # A tibble: 1 × 4 #>   trends_start_year trends_end_year trends_start_date trends_end_date #>               <dbl>           <dbl> <chr>             <chr>           #> 1              2012            2022 05-17             07-12"},{"path":"https://ebird.github.io/ebirdst/articles/trends.html","id":"spatial","dir":"Articles","previous_headings":"","what":"Conversion to spatial formats","title":"eBird Trends Data Products","text":"eBird trends data stored tabular format, row gives trend estimate single cell 27 km 27 km equal area grid. grid cell, coordinates (longitude latitude) provided center grid cell. many applications, explicitly spatial format useful coordinates can use convert tabular format either vector raster format.","code":""},{"path":"https://ebird.github.io/ebirdst/articles/trends.html","id":"spatial-points","dir":"Articles","previous_headings":"Conversion to spatial formats","what":"Vector (points)","title":"eBird Trends Data Products","text":"tabular trend data can converted point vector features use sf package using sf function st_as_sf(). points can exported GeoPackage use GIS QGIS ArcGIS ","code":"trends_sf <- st_as_sf(trends_sagthr,                        coords = c(\"longitude\", \"latitude\"),                        crs = 4326) print(trends_sf) #> Simple feature collection with 2462 features and 15 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -122.1784 ymin: 33.5256 xmax: -102.975 ymax: 49.35282 #> Geodetic CRS:  WGS 84 #> # A tibble: 2,462 × 16 #>    species_code season   start_year end_year start_date end_date srd_id      abd #>  * <chr>        <chr>         <int>    <int> <chr>      <chr>     <int>    <dbl> #>  1 sagthr       breeding       2012     2022 05-17      07-12    254264 0.000527 #>  2 sagthr       breeding       2012     2022 05-17      07-12    255764 0.0147   #>  3 sagthr       breeding       2012     2022 05-17      07-12    255765 0.000214 #>  4 sagthr       breeding       2012     2022 05-17      07-12    257264 0.00174  #>  5 sagthr       breeding       2012     2022 05-17      07-12    257265 0.0132   #>  6 sagthr       breeding       2012     2022 05-17      07-12    257266 0.00118  #>  7 sagthr       breeding       2012     2022 05-17      07-12    258765 0.00335  #>  8 sagthr       breeding       2012     2022 05-17      07-12    258766 0.0191   #>  9 sagthr       breeding       2012     2022 05-17      07-12    258767 0.00511  #> 10 sagthr       breeding       2012     2022 05-17      07-12    260264 0.000104 #> # ℹ 2,452 more rows #> # ℹ 8 more variables: abd_ppy <dbl>, abd_ppy_lower <dbl>, abd_ppy_upper <dbl>, #> #   abd_ppy_nonzero <lgl>, abd_trend <dbl>, abd_trend_lower <dbl>, #> #   abd_trend_upper <dbl>, geometry <POINT [°]> # be sure to modify the path to the file to save the file to directory of  # your choice on your hard drive write_sf(trends_sf, \"ebird-trends_sagthr_2022.gpkg\",          layer = \"sagthr_trends\")"},{"path":"https://ebird.github.io/ebirdst/articles/trends.html","id":"spatial-raster","dir":"Articles","previous_headings":"Conversion to spatial formats","what":"Raster","title":"eBird Trends Data Products","text":"tabular trend estimates can easily converted raster format use terra package using function rasterize_trends(). columns trends data frame can selected using layers argument converted layers resulting raster object. raster objects can exported GeoTIFF files use GIS QGIS ArcGIS simple map data can produced raster data. example, ’ll make map percent per year change relative abundance Sage Thrasher. Note slightly different trends maps Status Trends website, show cumulative trend rather annual trend.","code":"# rasterize the percent per year trend with confidence limits (default) ppy_raster <- rasterize_trends(trends_sagthr) print(ppy_raster) #> class       : SpatRaster  #> dimensions  : 67, 100, 3  (nrow, ncol, nlyr) #> resolution  : 26665.26, 26665.28  (x, y) #> extent      : -10602273, -7935747, 3714548, 5501122  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs  #> source(s)   : memory #> names       :   abd_ppy, abd_ppy_lower, abd_ppy_upper  #> min values  : -14.62142,     -17.52655,     -11.48219  #> max values  :  13.62980,      11.74418,      15.77865 # rasterize the cumulative trend estimate trends_raster <- rasterize_trends(trends_sagthr, layers = \"abd_trend\") print(trends_raster) #> class       : SpatRaster  #> dimensions  : 67, 100, 1  (nrow, ncol, nlyr) #> resolution  : 26665.26, 26665.28  (x, y) #> extent      : -10602273, -7935747, 3714548, 5501122  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs  #> source(s)   : memory #> name        : abd_trend  #> min value   : -79.41793  #> max value   : 258.85772 writeRaster(trends_raster, filename = \"ebird-trends_sagthr_2021.tif\") # define breaks and palettes similar to those on status and trends website breaks <- seq(-4, 4) breaks[1] <- -Inf breaks[length(breaks)] <- Inf pal <- ebirdst_palettes(length(breaks) - 1, type = \"trends\")  # make a simple map plot(ppy_raster[[\"abd_ppy\"]],       col = pal, breaks =  breaks,      main = \"Sage Thrasher breeding trend 2012-2022 [% change per year]\",      cex.main = 0.75,      axes = FALSE)"},{"path":"https://ebird.github.io/ebirdst/articles/trends.html","id":"uncertainty","dir":"Articles","previous_headings":"","what":"Uncertainty","title":"eBird Trends Data Products","text":"model used estimate trends produces ensemble 100 estimates location, based random subsample eBird data. ensemble estimates used quantify uncertainty trends estimates. estimated trend median across ensemble, 80% confidence intervals lower 10th upper 90th percentiles across ensemble. wishing access estimates individual folds making ensemble can use fold_estimates = TRUE loading data. fold-level estimates can used quantify uncertainty, example, calculating trend given region. example, let’s load fold-level estimates Sage Thrasher: data frame much concise, giving estimates mid-point relative abundance percent per year trend relative abundance 100 folds grid cell.","code":"trends_sagthr_folds <- load_trends(\"sagthr\", fold_estimates = TRUE) print(trends_sagthr_folds) #> # A tibble: 246,200 × 8 #>    species_code season    fold srd_id latitude longitude      abd abd_ppy #>    <chr>        <chr>    <dbl>  <int>    <dbl>     <dbl>    <dbl>   <dbl> #>  1 sagthr       breeding     1 254264     49.4     -120. 0.000527  -3.11  #>  2 sagthr       breeding     1 255764     49.1     -120. 0.0147    -2.97  #>  3 sagthr       breeding     1 255765     49.1     -119. 0.000214  -2.25  #>  4 sagthr       breeding     1 257264     48.9     -120. 0.00174   -4.53  #>  5 sagthr       breeding     1 257265     48.9     -120. 0.0132    -3.86  #>  6 sagthr       breeding     1 257266     48.9     -119. 0.00118   -4.04  #>  7 sagthr       breeding     1 258765     48.6     -120. 0.00335   -3.08  #>  8 sagthr       breeding     1 258766     48.6     -119. 0.0191    -0.459 #>  9 sagthr       breeding     1 258767     48.6     -119. 0.00511   -6.40  #> 10 sagthr       breeding     1 260264     48.4     -120. 0.000104  -2.71  #> # ℹ 246,190 more rows"},{"path":"https://ebird.github.io/ebirdst/articles/trends.html","id":"applications-regional","dir":"Articles","previous_headings":"Uncertainty","what":"Regional trends","title":"eBird Trends Data Products","text":"eBird trend estimates made 27 km 27 km grid, allows summarization broader regions states provinces. Since relative abundance species varies throughout range, need weight mean trend calculation relative abundance (abd trends data frame). quantify uncertainty regional trend, can use fold-level data produce 100 distinct estimates regional trend, calculate median 80% confidence intervals. example, let’s calculate state-level mean percent per year trends relative abundance Sage Thrasher. can join state-level trends back state boundaries make map ggplot2.  Based data, Sage Thrasher populations appear decline throughout entire range; however, states (e.g. South Dakota) experiencing much steeper declines others (e.g. California).","code":"# boundaries of states in the united states states <- ne_states(iso_a2 = \"US\", returnclass = \"sf\") %>%   filter(iso_a2 == \"US\", !postal %in% c(\"AK\", \"HI\")) %>%   transmute(state = iso_3166_2)  # convert fold-level trends estimates to sf format trends_sagthr_sf <-  st_as_sf(trends_sagthr_folds,                                coords = c(\"longitude\", \"latitude\"),                                crs = 4326)  # attach state to the fold-level trends data trends_sagthr_sf <- st_join(trends_sagthr_sf, states, left = FALSE)  # abundance-weighted average trend by region and fold trends_states_folds <- trends_sagthr_sf %>%   st_drop_geometry() %>%   group_by(state, fold) %>%   summarize(abd_ppy = sum(abd * abd_ppy) / sum(abd),             .groups = \"drop\")  # summarize across folds for each state trends_states <- trends_states_folds %>%    group_by(state) %>%   summarise(abd_ppy_median = median(abd_ppy, na.rm = TRUE),             abd_ppy_lower = quantile(abd_ppy, 0.10, na.rm = TRUE),             abd_ppy_upper = quantile(abd_ppy, 0.90, na.rm = TRUE),             .groups = \"drop\") %>%    arrange(abd_ppy_median) trends_states_sf <- left_join(states, trends_states, by = \"state\") ggplot(trends_states_sf) +   geom_sf(aes(fill = abd_ppy_median)) +   scale_fill_distiller(palette = \"Reds\",                         limits = c(NA, 0),                        na.value = \"grey80\") +   guides(fill = guide_colorbar(title.position = \"top\", barwidth = 15)) +   labs(title = \"Sage Thrasher state-level breeding trends 2012-2022\",        fill = \"Relative abundance trend [% change / year]\") +   theme_bw() +   theme(legend.position = \"bottom\")"},{"path":"https://ebird.github.io/ebirdst/articles/trends.html","id":"applications-multi","dir":"Articles","previous_headings":"Uncertainty","what":"Multi-species trends","title":"eBird Trends Data Products","text":"cases, may interested trend entire community birds, can estimated calculating cell-wise mean trend across suite species. example, eBird Trends Data Products contain trend estimates three species breed sagebrush: Brewer’s Sparrow, Sagebrush Sparrow, Sage Thrasher. can calculate average trend group species, provide estimate trend sagebrush bird community. First let’s look model information ensure species modeled region, season, range years. Everything looks good, can proceed compare trends species. Next need download trends data species. Note since ’ve already downloaded Sage Thrasher data won’t re-downloaded . Now can load trends calculate cell-wise mean. Finally, let’s make map sagebrush trends, focusing cells three species occur.","code":"sagebrush_species <- c(\"Brewer's Sparrow\", \"Sagebrush Sparrow\", \"Sage Thrasher\") trends_runs %>%    filter(common_name %in% sagebrush_species) #> # A tibble: 3 × 10 #>   species_code common_name       trends_season trends_region trends_start_year #>   <chr>        <chr>             <chr>         <chr>                     <dbl> #> 1 brespa       Brewer's Sparrow  breeding      north_america              2012 #> 2 sagspa1      Sagebrush Sparrow breeding      north_america              2012 #> 3 sagthr       Sage Thrasher     breeding      north_america              2012 #> # ℹ 5 more variables: trends_end_year <dbl>, trends_start_date <chr>, #> #   trends_end_date <chr>, rsquared <dbl>, beta0 <dbl> ebirdst_download_trends(sagebrush_species) trends_sagebrush_species <- load_trends(sagebrush_species)  # calculate mean trend for each cell trends_sagebrush <- trends_sagebrush_species %>%    group_by(srd_id, latitude, longitude) %>%    summarize(n_species = n(),             abd_ppy = mean(abd_ppy, na.rm = TRUE),             .groups = \"drop\") print(trends_sagebrush) #> # A tibble: 3,265 × 5 #>    srd_id latitude longitude n_species abd_ppy #>     <int>    <dbl>     <dbl>     <int>   <dbl> #>  1 234764     52.5     -118.         1  -8.61  #>  2 234765     52.5     -117.         1  -7.91  #>  3 234766     52.5     -117.         1  -6.30  #>  4 236265     52.2     -118.         1  -0.521 #>  5 236266     52.2     -117.         1  -6.90  #>  6 236267     52.2     -117.         1  -6.56  #>  7 236268     52.2     -116.         1  -5.27  #>  8 237765     52.0     -118.         1  -5.89  #>  9 237766     52.0     -117.         1  -5.68  #> 10 237767     52.0     -117.         1  -9.76  #> # ℹ 3,255 more rows # convert the points to sf format all_species <- trends_sagebrush %>%    filter(n_species == length(sagebrush_species)) %>%    st_as_sf(coords = c(\"longitude\", \"latitude\"),            crs = 4326)  # make a map ggplot(all_species) +   geom_sf(aes(color = abd_ppy), size = 2) +   scale_color_gradient2(low = \"#CB181D\", high = \"#2171B5\",                         limits = c(-4, 4),                          oob = scales::oob_squish) +   guides(color = guide_colorbar(title.position = \"left\", barheight = 15)) +   labs(title = \"Sagebrush species breeding trends (2012-2022)\",        color = \"Relative abundance trend [% change / year]\") +   theme_bw() +   theme(legend.title = element_text(angle = 90))"},{"path":"https://ebird.github.io/ebirdst/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Strimas-Mackey. Author, maintainer. Shawn Ligocki. Author. Tom Auer. Author. Daniel Fink. Author. Cornell Lab Ornithology. Copyright holder.","code":""},{"path":"https://ebird.github.io/ebirdst/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matthew Strimas-Mackey, Shawn Ligocki, Tom Auer, Daniel Fink (2023). ebirdst: Access Analyze eBird Status Trends Data Products. R package version 3.2022.0. https://ebird.github.io/ebirdst/","code":"@Manual{,   title = {ebirdst: Access and Analyze eBird Status and Trends Data Products},   author = {Matthew Strimas-Mackey and Shawn Ligocki and Tom Auer and Daniel Fink},   year = {2023},   note = {R package version 3.2022.0},   url = {https://ebird.github.io/ebirdst/}, }"},{"path":[]},{"path":"https://ebird.github.io/ebirdst/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Access and Analyze eBird Status and Trends Data Products","text":"eBird Status Trends project Cornell Lab Ornithology uses machine-learning models estimate distributions, relative abundances, population trends high spatial temporal resolution across full annual cycle 1,117 bird species globally. models learn relationships bird observations collected eBird suite remotely sensed habitat variables, accounting noise bias inherent community science datasets, including variation observer behavior effort. Interactive maps visualizations model estimates can explored online, Status Trends Data Products provide access data behind maps visualizations. ebirdst R package provides set tools downloading data products, loading R, using visualization analysis.","code":""},{"path":"https://ebird.github.io/ebirdst/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access and Analyze eBird Status and Trends Data Products","text":"Install ebirdst GitHub : version ebirdst designed work eBird Status Trends Data Products estimated year 2022 released 2023. Users strongly discouraged comparing Status Trends results years due methodological differences versions. accessed used previous versions /may need access previous versions reasons related reproducibility, please contact ebird@cornell.edu request considered.","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") } remotes::install_github(\"ebird/ebirdst\")"},{"path":"https://ebird.github.io/ebirdst/index.html","id":"data-access","dir":"","previous_headings":"","what":"Data access","title":"Access and Analyze eBird Status and Trends Data Products","text":"Data access granted Access Request Form : https://ebird.org/st/request. Access form generates key used R package provided immediately (long commercial use requested). terms use designed quite permissive many cases, particularly academic research use. requesting data access, please sure carefully read terms use ensure intended use restricted. completing Access Request Form, provided Status Trends Data Products access key, need downloading data. store key package can access downloading data, use function set_ebirdst_access_key(\"XXXXX\"), \"XXXXX\" access key provided . interested accessing data outside R, widely used data products available direct download Status Trends website. Spatial data accessible widely adopted GeoTIFF GeoPackage formats, can opened QGIS, ArcGIS, GIS software.","code":""},{"path":"https://ebird.github.io/ebirdst/index.html","id":"versions","dir":"","previous_headings":"","what":"Versions","title":"Access and Analyze eBird Status and Trends Data Products","text":"eBird Status Trends Data Products provide estimates relative abundance, variables, particular year. estimation year used identify version data products. version R package associated particular version data. example, current version R package 3.2022.4 , indicated year version number, designed work 2022 data products. Every year, typically November, Status Trends Data Products updated, users encouraged update R package transition using new version data products. data products updated, brief period access previous version also provided, allowing users finish analyses previous version. intended continue using older data products period must update R package.","code":""},{"path":"https://ebird.github.io/ebirdst/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Access and Analyze eBird Status and Trends Data Products","text":"use eBird Status Trends data please cite : Fink, D., T. Auer, . Johnston, M. Strimas-Mackey, S. Ligocki, O. Robinson, W. Hochachka, L. Jaromczyk, C. Crowley, K. Dunham, . Stillman, . Davies, . Rodewald, V. Ruiz-Gutierrez, C. Wood. 2023. eBird Status Trends, Data Version: 2022; Released: 2023. Cornell Lab Ornithology, Ithaca, New York. https://doi.org/10.2173/ebirdst.2022 Download BibTeX.","code":""},{"path":"https://ebird.github.io/ebirdst/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Access and Analyze eBird Status and Trends Data Products","text":"full package documentation, including series vignettes covering full spectrum introductory advanced usage, please see package website. available vignettes : Introduction eBird Status Data Products: covers data access, available data products, structure format data files. eBird Status Data Products Applications: demonstrates work raster data products use variety common applications. eBird Trends Data Products: covers downloading working eBird Trends Data Products.","code":""},{"path":"https://ebird.github.io/ebirdst/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Access and Analyze eBird Status and Trends Data Products","text":"quick start guide shows download data plot relative abundance values similar plotted eBird Status Trends weekly abundance animations. guide, throughout package documentation, simplified example dataset used consisting Yellow-bellied Sapsucker Michigan. full list species available download, look data frame ebirst_runs, included package. IMPORTANT: eBird Status Trends Data Products designed downloaded accessed using R package. Downloaded data specific file structure changing file names locations disrupt ability functions package access data. prefer access data use outside R, consider downloading data via eBird Status Trends website.","code":"library(fields) library(rnaturalearth) library(sf) library(terra) library(ebirdst)  # download example data, yellow-bellied sapsucker in michigan ebirdst_download_status(species = \"yebsap-example\")  # load relative abundance raster stack with 52 layers, one for each week abd <- load_raster(\"yebsap-example\", resolution = \"27km\")  # load species specific mapping parameters pars <- load_fac_map_parameters(\"yebsap-example\") # custom coordinate reference system crs <- st_crs(pars$custom_projection) # legend breaks breaks <- pars$weekly_bins # legend labels for top, middle, and bottom labels <- pars$weekly_labels  # the date that each raster layer corresponds to is stored within the labels weeks <- as.Date(names(abd)) print(weeks) #>  [1] \"2022-01-04\" \"2022-01-11\" \"2022-01-18\" \"2022-01-25\" \"2022-02-01\" #>  [6] \"2022-02-08\" \"2022-02-15\" \"2022-02-22\" \"2022-03-01\" \"2022-03-08\" #> [11] \"2022-03-15\" \"2022-03-22\" \"2022-03-29\" \"2022-04-05\" \"2022-04-12\" #> [16] \"2022-04-19\" \"2022-04-26\" \"2022-05-03\" \"2022-05-10\" \"2022-05-17\" #> [21] \"2022-05-24\" \"2022-05-31\" \"2022-06-07\" \"2022-06-14\" \"2022-06-21\" #> [26] \"2022-06-28\" \"2022-07-05\" \"2022-07-12\" \"2022-07-19\" \"2022-07-26\" #> [31] \"2022-08-02\" \"2022-08-09\" \"2022-08-16\" \"2022-08-23\" \"2022-08-30\" #> [36] \"2022-09-06\" \"2022-09-13\" \"2022-09-20\" \"2022-09-27\" \"2022-10-04\" #> [41] \"2022-10-11\" \"2022-10-18\" \"2022-10-25\" \"2022-11-01\" \"2022-11-08\" #> [46] \"2022-11-15\" \"2022-11-22\" \"2022-11-29\" \"2022-12-06\" \"2022-12-13\" #> [51] \"2022-12-20\" \"2022-12-27\" # select a week in the middle of the year abd <- abd[[26]]  # project to species specific coordinates # the nearest neighbor method preserves cell values across projections abd_prj <- project(trim(abd), crs$wkt, method = \"near\")  # get reference data from the rnaturalearth package # the example data currently shows only the US state of Michigan wh_states <- ne_states(country = c(\"United States of America\", \"Canada\"),                        returnclass = \"sf\") %>%    st_transform(crs = crs) %>%    st_geometry()  # start plotting par(mfrow = c(1, 1), mar = c(0, 0, 0, 0))  # use raster bounding box to set the spatial extent for the plot bb <- st_as_sfc(st_bbox(trim(abd_prj))) plot(bb, col = \"white\", border = \"white\") # add background reference data plot(wh_states, col = \"#cfcfcf\", border = NA, add = TRUE)  # plot zeroes as light gray plot(abd_prj, col = \"#e6e6e6\", maxpixels = ncell(abd_prj),      axes = FALSE, legend = FALSE, add = TRUE)  # define color palette pal <- ebirdst_palettes(length(breaks) - 1, type = \"weekly\") # plot abundance plot(abd_prj, col = pal, breaks = breaks, maxpixels = ncell(abd_prj),      axes = FALSE, legend = FALSE, add = TRUE)  # state boundaries plot(wh_states, add = TRUE, col = NA, border = \"white\", lwd = 1.5)  # legend label_breaks <- seq(0, 1, length.out = length(breaks)) image.plot(zlim = c(0, 1), breaks = label_breaks, col = pal,            smallplot = c(0.90, 0.93, 0.15, 0.85),            legend.only = TRUE,            axis.args = list(at = c(0, 0.5, 1),                              labels = round(labels, 2),                             cex.axis = 0.9, lwd.ticks = 0))"},{"path":"https://ebird.github.io/ebirdst/reference/abundance_palette-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"eBird Status and Trends color palettes for mapping — abundance_palette-deprecated","title":"eBird Status and Trends color palettes for mapping — abundance_palette-deprecated","text":"deprecated function replaced ebirdst_palettes. functions generate color palettes used eBird Status Trends relative abundance maps.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/abundance_palette-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eBird Status and Trends color palettes for mapping — abundance_palette-deprecated","text":"","code":"abundance_palette(n,                         season = c(\"weekly\", \"breeding\",                                    \"nonbreeding\",                                    \"migration\",                                    \"prebreeding_migration\",                                    \"postbreeding_migration\",                                    \"year_round\"))"},{"path":"https://ebird.github.io/ebirdst/reference/abundance_palette-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"eBird Status and Trends color palettes for mapping — abundance_palette-deprecated","text":"n integer; number colors palette. season character; season generate colors \"weekly\" get color palette used weekly abundance animations.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/abundance_palette-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"eBird Status and Trends color palettes for mapping — abundance_palette-deprecated","text":"character vector hex color codes.","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/reference/assign_to_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign points to a spacetime grid — assign_to_grid","title":"Assign points to a spacetime grid — assign_to_grid","text":"Given set points space (optionally) time, define regular grid given dimensions, return grid cell index point.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/assign_to_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign points to a spacetime grid — assign_to_grid","text":"","code":"assign_to_grid(   points,   coords = NULL,   is_lonlat = FALSE,   res,   jitter_grid = TRUE,   grid_definition = NULL )"},{"path":"https://ebird.github.io/ebirdst/reference/assign_to_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign points to a spacetime grid — assign_to_grid","text":"points data frame; points spatial coordinates x y, optional time coordinate t. coords character; names spatial temporal coordinates input dataframe. provide names want overwrite default coordinate names: c(\"x\", \"y\", \"t\") c(\"longitude\", \"latitude\", \"t\") is_lonlat = TRUE. is_lonlat logical; points unprojected, lon-lat coordinates. case, input data frame columns \"longitude\" \"latitude\" points projected equal area Eckert IV CRS prior grid assignment. res numeric; resolution grid x, y, t dimensions, respectively. 2 dimensions provided, space grid generated. units res coordinates input data unless is_lonlat true case x y resolution provided meters. jitter_grid logical; whether jitter location origin grid introduce randomness. grid_definition list; object defining grid via origin resolution components. assign multiple sets points exactly grid, assign_to_grid() returns data frame grid_definition attribute can passed subsequent calls assign_to_grid(). res jitter ignored grid_definition provided.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/assign_to_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign points to a spacetime grid — assign_to_grid","text":"Data frame indices space-spacetime grid cells. data frame grid_definition attribute can used reconstruct grid.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/assign_to_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign points to a spacetime grid — assign_to_grid","text":"","code":"set.seed(1)  # generate some example points points_xyt <- data.frame(x = runif(100), y = runif(100), t = rnorm(100)) # assign to grid cells <- assign_to_grid(points_xyt, res = c(0.1, 0.1, 0.5))  # assign a second set of points to the same grid assign_to_grid(points_xyt, grid_definition = attr(cells, \"grid_definition\")) #> # A tibble: 100 × 2 #>    cell_xy cell_xyt #>    <chr>   <chr>    #>  1 4-7     4-7-4    #>  2 5-4     5-4-5    #>  3 7-3     7-3-3    #>  4 10-10   10-10-6  #>  5 3-7     3-7-4    #>  6 10-3    10-3-9   #>  7 10-2    10-2-7   #>  8 8-5     8-5-7    #>  9 7-10    7-10-6   #> 10 2-7     2-7-9    #> # ℹ 90 more rows  # assign lon-lat points to a 10km space-only grid points_ll <- data.frame(longitude = runif(100, min = -180, max = 180),                         latitude = runif(100, min = -90, max = 90)) assign_to_grid(points_ll, res = c(10000, 10000), is_lonlat = TRUE) #> # A tibble: 100 × 1 #>    cell_xy   #>    <chr>     #>  1 2960-1224 #>  2 3184-781  #>  3 2110-1687 #>  4 1254-617  #>  5 2407-1571 #>  6 244-1415  #>  7 3172-924  #>  8 2894-1604 #>  9 1203-769  #> 10 2118-1    #> # ℹ 90 more rows  # overwrite default coordinate names, 5km by 1 week grid points_names <- data.frame(lon = runif(100, min = -180, max = 180),                            lat = runif(100, min = -90, max = 90),                            day = sample.int(365, size = 100)) assign_to_grid(points_names,                res = c(5000, 5000, 7),                coords = c(\"lon\", \"lat\", \"day\"),                is_lonlat = TRUE) #> # A tibble: 100 × 2 #>    cell_xy   cell_xyt     #>    <chr>     <chr>        #>  1 5348-68   5348-68-49   #>  2 2294-1332 2294-1332-40 #>  3 2577-1839 2577-1839-16 #>  4 5159-3343 5159-3343-26 #>  5 867-2655  867-2655-5   #>  6 5944-2704 5944-2704-19 #>  7 2254-1551 2254-1551-41 #>  8 3453-166  3453-166-51  #>  9 3515-2926 3515-2926-9  #> 10 4736-1401 4736-1401-33 #> # ℹ 90 more rows"},{"path":"https://ebird.github.io/ebirdst/reference/calculate_mcc_f1.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate MCC and F1 score — calculate_mcc_f1","title":"Calculate MCC and F1 score — calculate_mcc_f1","text":"Given binary observed predicted response, estimate Matthews correlation coefficient (MCC) F1 score.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/calculate_mcc_f1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate MCC and F1 score — calculate_mcc_f1","text":"","code":"calculate_mcc_f1(observed, predicted)"},{"path":"https://ebird.github.io/ebirdst/reference/calculate_mcc_f1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate MCC and F1 score — calculate_mcc_f1","text":"observed logical 0/1; observed binary response. predicted logical 0/1; predicted binary response. typically need generated applying threshold continuous predicted response.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/calculate_mcc_f1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate MCC and F1 score — calculate_mcc_f1","text":"list two elements: mcc f1.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/calculate_mcc_f1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate MCC and F1 score — calculate_mcc_f1","text":"","code":"obs <- c(rep(1L, 1000L), rep(0L, 10000L)) pred <- c(rbeta(300L, 12, 2), rbeta(700L, 3, 4), rbeta(10000L, 2, 3)) calculate_mcc_f1(obs > 0, pred > 0.5) #> $f1 #> [1] 0.2227891 #>  #> $mcc #> [1] 0.125311 #>"},{"path":"https://ebird.github.io/ebirdst/reference/date_to_st_week.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Status and Trends week that a date falls into — date_to_st_week","title":"Get the Status and Trends week that a date falls into — date_to_st_week","text":"Get Status Trends week date falls ","code":""},{"path":"https://ebird.github.io/ebirdst/reference/date_to_st_week.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Status and Trends week that a date falls into — date_to_st_week","text":"","code":"date_to_st_week(dates, version = 2022)"},{"path":"https://ebird.github.io/ebirdst/reference/date_to_st_week.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Status and Trends week that a date falls into — date_to_st_week","text":"dates vector dates. version One 2021 date scheme used 2021 prior data releases 2022 date scheme used 2022 subsequent releases.  Default 2022.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/date_to_st_week.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Status and Trends week that a date falls into — date_to_st_week","text":"integer vector weeks numbers 1-52.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/date_to_st_week.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Status and Trends week that a date falls into — date_to_st_week","text":"","code":"d <- as.Date(c(\"2016-04-08\", \"2018-12-31\", \"2014-01-01\", \"2018-09-04\")) date_to_st_week(d) #> [1] 15 52  1 36"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct functions in package ebirdst. — ebirdst-defunct","title":"Defunct functions in package ebirdst. — ebirdst-defunct","text":"functions listed defunct longer supported. Calling result error. possible alternative functions suggested. Many supported stixles infrequently used dropped ebirdst 2022 data release.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defunct functions in package ebirdst. — ebirdst-defunct","text":"","code":"ebirdst_download(   species,   path = ebirdst_data_dir(),   tifs_only = TRUE,   force = FALSE,   show_progress = TRUE,   pattern = NULL,   dry_run = FALSE )  ebirdst_extent(x, t, ...)  ebirdst_habitat(path, ext, data = NULL, stationary_associations = FALSE)  ebirdst_ppms(path, ext, es_cutoff, pat_cutoff)  ebirdst_ppms_ts(ath, ext, summarize_by = c(\"weeks\", \"months\"), ...)  ebirdst_subset(x, crs)  load_pds(path, ext, model = c(\"occurrence\", \"count\"), return_sf = FALSE)  load_pis(path, ext, model = c(\"occurrence\", \"count\"), return_sf = FALSE)  load_predictions(path, return_sf = FALSE)  parse_raster_dates(x)  load_stixels(path, ext, return_sf = FALSE)  project_extent(x, crs)  plot_pds(path, ext, summarize_by = c(\"weeks\", \"months\"), ...)  plot_pis(   pis,   ext,   by_cover_class = TRUE,   n_top_pred = 15,   pretty_names = TRUE,   plot = TRUE )  stixelize(x)"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defunct functions in package ebirdst. — ebirdst-defunct","text":"... arguments now ignored.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package ebirdst. — ebirdst-deprecated","title":"Deprecated functions in package ebirdst. — ebirdst-deprecated","text":"functions listed deprecated support eventually dropped. Help pages deprecated functions available help(\"<function>-deprecated\").","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in package ebirdst. — ebirdst-deprecated","text":"","code":"abundance_palette(   n,   season = c(\"weekly\", \"breeding\", \"nonbreeding\", \"migration\", \"prebreeding_migration\",     \"postbreeding_migration\", \"year_round\") )"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst-deprecated.html","id":"abundance-palette","dir":"Reference","previous_headings":"","what":"abundance_palette","title":"Deprecated functions in package ebirdst. — ebirdst-deprecated","text":"abundance_palette, use ebirdst_palettes","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ebirdst: Tools to Load, Map, Plot, and Analyze eBird Status and Trends Data Products — ebirdst-package","title":"ebirdst: Tools to Load, Map, Plot, and Analyze eBird Status and Trends Data Products — ebirdst-package","text":"Tools load, map, plot, analyze eBird Status Trends data products","code":""},{"path":[]},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ebirdst: Tools to Load, Map, Plot, and Analyze eBird Status and Trends Data Products — ebirdst-package","text":"Maintainer: Matthew Strimas-Mackey mes335@cornell.edu (ORCID) Authors: Shawn Ligocki sligocki@cornell.edu Tom Auer mta45@cornell.edu (ORCID) Daniel Fink df36@cornell.edu (ORCID) contributors: Cornell Lab Ornithology [copyright holder]","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_data_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Path to eBird Status and Trends data download directory — ebirdst_data_dir","title":"Path to eBird Status and Trends data download directory — ebirdst_data_dir","text":"Identify return path default download directory eBird Status Trends data products. directory can defined setting environment variable EBIRDST_DATA_DIR, otherwise directory returned tools::R_user_dir(\"ebirdst\", = \"data\") used.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_data_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path to eBird Status and Trends data download directory — ebirdst_data_dir","text":"","code":"ebirdst_data_dir()"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_data_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path to eBird Status and Trends data download directory — ebirdst_data_dir","text":"path data download directory.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_data_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Path to eBird Status and Trends data download directory — ebirdst_data_dir","text":"","code":"ebirdst_data_dir() #> [1] \"/Users/mes335/data/ebirdst\""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_data_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Download eBird Status and Trends Data Coverage Products — ebirdst_download_data_coverage","title":"Download eBird Status and Trends Data Coverage Products — ebirdst_download_data_coverage","text":"addition species-specific data products, eBird Status data products include two products providing estimates weekly data coverage 3 km spatial resolution: site selection probability spatial coverage. function downloads data products raster GeoTIFF format.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_data_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download eBird Status and Trends Data Coverage Products — ebirdst_download_data_coverage","text":"","code":"ebirdst_download_data_coverage(   path = ebirdst_data_dir(),   pattern = NULL,   dry_run = FALSE,   force = FALSE,   show_progress = TRUE )"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_data_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download eBird Status and Trends Data Coverage Products — ebirdst_download_data_coverage","text":"path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir(). pattern character; regular expression pattern supply str_detect() filter files download. filter applied addition download_ arguments. Note files mandatory always downloaded. dry_run logical; whether dry run, just listing files downloaded. can useful testing use pattern filter files download. force logical; data already downloaded, fresh copy downloaded anyway. show_progress logical; whether print download progress information.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_data_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download eBird Status and Trends Data Coverage Products — ebirdst_download_data_coverage","text":"Path folder containing downloaded data coverage products.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_data_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download eBird Status and Trends Data Coverage Products — ebirdst_download_data_coverage","text":"","code":"if (FALSE) { # download all data coverage products ebirdst_download_data_coverage()  # download just the spatial coverage products ebirdst_download_data_coverage(pattern = \"spatial-coverage\")  # download a single week of data coverage products ebirdst_download_data_coverage(pattern = \"01-04\")  # download all weeks in april ebirdst_download_data_coverage(pattern = \"04-\") }"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Download eBird Status Data Products — ebirdst_download_status","title":"Download eBird Status Data Products — ebirdst_download_status","text":"Download eBird Status Data Products single species, example species. Downloading Status Trends data requires access key, consult set_ebirdst_access_key() instructions obtain store key. example data consist results Yellow-bellied Sapsucker subset Michigan much smaller full dataset, making data quicker download process. low resolution (27 km) data available example data. addition, example data accessible without access key.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download eBird Status Data Products — ebirdst_download_status","text":"","code":"ebirdst_download_status(   species,   path = ebirdst_data_dir(),   download_abundance = TRUE,   download_occurrence = FALSE,   download_count = FALSE,   download_ranges = FALSE,   download_regional = FALSE,   download_pis = FALSE,   download_ppms = FALSE,   download_all = FALSE,   pattern = NULL,   dry_run = FALSE,   force = FALSE,   show_progress = TRUE )"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download eBird Status Data Products — ebirdst_download_status","text":"species character; single species given scientific name, common name six-letter species code (e.g. \"woothr\"). full list valid species ebirdst_runs data frame included package. download example dataset, use \"yebsap-example\". path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir(). download_abundance whether download estimates abundance proportion population. download_occurrence logical; whether download estimates occurrence. download_count logical; whether download estimates count. download_ranges logical; whether download range polygons. download_regional logical; whether download regional summary stats, e.g. percent population regions. download_pis logical; whether download spatial estimates predictor importance. download_ppms logical; whether download spatial predictive performance metrics. download_all logical; download files data package. Equivalent setting download_ arguments TRUE. pattern character; regular expression pattern supply str_detect() filter files download. filter applied addition download_ arguments. Note files mandatory always downloaded. dry_run logical; whether dry run, just listing files downloaded. can useful testing use pattern filter files download. force logical; data already downloaded, fresh copy downloaded anyway. show_progress logical; whether print download progress information.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download eBird Status Data Products — ebirdst_download_status","text":"Path folder containing downloaded data package given species. dry_run = TRUE list files download returned.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download eBird Status Data Products — ebirdst_download_status","text":"complete data package species contains large number files, cataloged vignettes. users require small subset files, default function downloads commonly used files: GeoTIFFs providing estimate relative abundance proportion population. interested additional data products, arguments starting download_ control download products. pattern argument provides even finer grained control gets downloaded.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download eBird Status Data Products — ebirdst_download_status","text":"","code":"if (FALSE) { # download the example data ebirdst_download_status(\"yebsap-example\")  # download the data package for wood thrush ebirdst_download_status(\"woothr\")  # use pattern to only download low resolution (27 km) geotiff data # dry_run can be used to see what files will be downloaded ebirdst_download_status(\"lobcur\", pattern = \"_27km_\", dry_run = TRUE) # use pattern to only download high resolution (3 km) weekly abundance data ebirdst_download_status(\"lobcur\", pattern = \"abundance_median_3km\",                         dry_run = TRUE) }"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_trends.html","id":null,"dir":"Reference","previous_headings":"","what":"Download eBird Trends Data Products — ebirdst_download_trends","title":"Download eBird Trends Data Products — ebirdst_download_trends","text":"Download eBird Trends Data Products set species, example species. Downloading Status Trends data requires access key, consult set_ebirdst_access_key() instructions obtain store key. example data consist results Yellow-bellied Sapsucker subset Michigan much smaller full dataset, making data quicker download process. example data accessible without access key.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_trends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download eBird Trends Data Products — ebirdst_download_trends","text":"","code":"ebirdst_download_trends(   species,   path = ebirdst_data_dir(),   force = FALSE,   show_progress = TRUE )"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_trends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download eBird Trends Data Products — ebirdst_download_trends","text":"species character; one species given scientific names, common names six-letter species codes (e.g. \"woothr\"). full list valid species can viewed ebirdst_runs data frame included package; species trends estimates indicated has_trends column. access example dataset, use \"yebsap-example\". path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir(). force logical; data already downloaded, fresh copy downloaded anyway. show_progress logical; whether print download progress information.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_trends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download eBird Trends Data Products — ebirdst_download_trends","text":"Character vector paths folders containing downloaded data packages given species. trends data trends/ subdirectory.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_download_trends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download eBird Trends Data Products — ebirdst_download_trends","text":"","code":"if (FALSE) { # download the example data ebirdst_download_trends(\"yebsap-example\")  # download the data package for wood thrush ebirdst_download_trends(\"woothr\")  # multiple species can be downloaded at once ebirdst_download_trends(c(\"Sage Thrasher\", \"Abert's Towhee\")) }"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"eBird Status and Trends color palettes for mapping — ebirdst_palettes","title":"eBird Status and Trends color palettes for mapping — ebirdst_palettes","text":"Generate color palettes used eBird Status Trends relative abundance trends maps.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eBird Status and Trends color palettes for mapping — ebirdst_palettes","text":"","code":"ebirdst_palettes(   n,   type = c(\"weekly\", \"breeding\", \"nonbreeding\", \"migration\", \"prebreeding_migration\",     \"postbreeding_migration\", \"year_round\", \"trends\") )"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"eBird Status and Trends color palettes for mapping — ebirdst_palettes","text":"n integer; number colors palette. type character; type color palette: \"weekly\" weekly relative abundance, \"trends\" trends color palett, season name seasonal relative abundance. Note trends diverging palette returned, palettes sequential.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_palettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"eBird Status and Trends color palettes for mapping — ebirdst_palettes","text":"character vector hex color codes.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"eBird Status and Trends color palettes for mapping — ebirdst_palettes","text":"","code":"# breeding season color palette ebirdst_palettes(10, type = \"breeding\") #>  [1] \"#DFC0BC\" \"#DBADA7\" \"#D89A92\" \"#D5887D\" \"#D27568\" \"#CF6252\" \"#CC503E\" #>  [8] \"#BB4938\" \"#AA4233\" \"#993C2E\""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_predictor_descriptions.html","id":null,"dir":"Reference","previous_headings":"","what":"eBird Status and Trends predictors descriptions — ebirdst_predictor_descriptions","title":"eBird Status and Trends predictors descriptions — ebirdst_predictor_descriptions","text":"Details eBird Status Trends predictor variables , variables derived dataset, details dataset.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_predictor_descriptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eBird Status and Trends predictors descriptions — ebirdst_predictor_descriptions","text":"","code":"ebirdst_predictor_descriptions"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_predictor_descriptions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"eBird Status and Trends predictors descriptions — ebirdst_predictor_descriptions","text":"data frame 37 rows 4 columns dataset: dataset name. predictor: predictor name , multiple variables derived dataset, pattern used generate names. description: detailed description dataset variable. reference: reference consult information dataset.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"eBird Status and Trends predictor variables — ebirdst_predictors","title":"eBird Status and Trends predictor variables — ebirdst_predictors","text":"data frame predictors used eBird Status Trends models. include effort variables (e.g. distance traveled, number observers, etc.) addition variables describing environment (e.g. elevation, land cover, water cover, etc.). environmental variables derived summarizing remotely sensed datasets (described ebirdst_predictor_descriptions) 3 km diameter neighborhood around checklist. categorical datasets, two variables generated class describing percent cover (pland) edge density (ed).","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eBird Status and Trends predictor variables — ebirdst_predictors","text":"","code":"ebirdst_predictors"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_predictors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"eBird Status and Trends predictor variables — ebirdst_predictors","text":"data frame 150 rows 4 columns: predictor: predictor name. dataset: dataset name, can cross referenced ebirdst_predictor_descriptions details. class: class number name categorical variables. label: descriptive labels predictor variable.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of species with eBird Status and Trends Data Products — ebirdst_runs","title":"Data frame of species with eBird Status and Trends Data Products — ebirdst_runs","text":"dataset listing species eBird Status Trends Data Products available, additional information relevant Status Trends results species.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of species with eBird Status and Trends Data Products — ebirdst_runs","text":"","code":"ebirdst_runs"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_runs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of species with eBird Status and Trends Data Products — ebirdst_runs","text":"data frame 27 variables: species_code: alphanumeric eBird species code uniquely identifying species scientific_name: scientific name. common_name: English common name. is_resident: classifies species resident migrant. breeding_quality: breeding season quality. breeding_start: breeding season start date. breeding_end: breeding season start date. nonbreeding_quality: non-breeding season quality. nonbreeding_start: non-breeding season start date. nonbreeding_end: non-breeding season start date. postbreeding_migration_quality: post-breeding season quality. postbreeding_migration_start: post-breeding season start date. postbreeding_migration_end: post-breeding season start date. prebreeding_migration_quality: pre-breeding season quality. prebreeding_migration_start: pre-breeding season start date. prebreeding_migration_end: pre-breeding season start date. resident_quality: resident quality. resident_start: resident species, year-round start date. resident_end: resident species, year-round end date. has_trends: whether species trends estimates. trends_season: season trend estimated : breeding, nonbreeding, resident. trends_region: geographic region trend model run . Note broadly distributed species (e.g. Barn Swallow) trend estimates regional subset full range. trends_start_year: start year trend time period. trends_end_year: end year trend time period. trends_start_date: start date (MM-DD format) season trend estimated. trends_end_date: end date (MM-DD format) season trend estimated. rsquared: R-squared value comparing actual estimated trends simulations. beta0: intercept linear model fitting actual vs. estimated trends. (actual ~ estimated) simulations. Positive values beta0 indicate models systematically underestimating simulated trend species.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_runs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data frame of species with eBird Status and Trends Data Products — ebirdst_runs","text":"Status Data Products, dates defining boundaries seasons provided additional quality rating 0-3 season. dates quality ratings assigned process expert review. expert review. Note missing dates imply season failed expert review species within season. Trends Data Products available subset species, indicated has_trends variable, species trends estimated single season. two predictive performance metrics (rsquared beta0) based comparison actual estimated percent per year trends suite simulations (see Fink et al. 2023 details). trends regions defined follows: aus_nz: Australia New Zealand iberia: Spain Portugal india_se_asia: India, Nepal, Bhutan, Sri Lanka, Thailand, Cambodia, Malaysia, Brunei, Singapore, Philippines japan: Japan north_america: North America including Mexico, Central America, Caribbean, excluding Nunavut, North West Territories, Hawaii south_africa: South Africa, Lesotho, Eswatini south_america: Colombia, Ecuador, Peru, Chile, Argentina, Uruguay taiwan: Taiwan turkey_plus: Turkey, Cyprus, Israel, Palestine, Greece, Armenia, Georgia","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_version.html","id":null,"dir":"Reference","previous_headings":"","what":"eBird Status and Trends Data Products version — ebirdst_version","title":"eBird Status and Trends Data Products version — ebirdst_version","text":"Identify version eBird Status Trends Data Products version R package works . Versions defined year model estimates made . addition, release data end date access version data provided. Note given access end data longer able download version data required update R package transition using newer data version.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eBird Status and Trends Data Products version — ebirdst_version","text":"","code":"ebirdst_version()"},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"eBird Status and Trends Data Products version — ebirdst_version","text":"list three components: version_year year model estimates made version data, release_year year version data released, access_end_date last date users able download version data.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/ebirdst_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"eBird Status and Trends Data Products version — ebirdst_version","text":"","code":"ebirdst_version() #> $version_year #> [1] 2022 #>  #> $release_year #> [1] 2023 #>  #> $access_end_date #> [1] \"2024-11-15\" #>"},{"path":"https://ebird.github.io/ebirdst/reference/get_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Get eBird species code for a set of species — get_species","title":"Get eBird species code for a set of species — get_species","text":"Give vector species codes, common names, /scientific names, return vector 6-letter eBird species codes. function look codes species eBird Status Trends results exist.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/get_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get eBird species code for a set of species — get_species","text":"","code":"get_species(x)"},{"path":"https://ebird.github.io/ebirdst/reference/get_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get eBird species code for a set of species — get_species","text":"x character; vector species codes, common names, /scientific names.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/get_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get eBird species code for a set of species — get_species","text":"character vector eBird species codes.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/get_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get eBird species code for a set of species — get_species","text":"","code":"get_species(c(\"Black-capped Chickadee\", \"Poecile gambeli\", \"carchi\")) #> [1] \"bkcchi\" \"mouchi\" \"carchi\""},{"path":"https://ebird.github.io/ebirdst/reference/get_species_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path to the data package for a given species — get_species_path","title":"Get the path to the data package for a given species — get_species_path","text":"helper function can used get path data package given species.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/get_species_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path to the data package for a given species — get_species_path","text":"","code":"get_species_path(species, path = ebirdst_data_dir(), check_downloaded = TRUE)"},{"path":"https://ebird.github.io/ebirdst/reference/get_species_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the path to the data package for a given species — get_species_path","text":"species character; single species given scientific name, common name six-letter species code (e.g. \"woothr\"). full list valid species ebirdst_runs data frame included package. download example dataset, use \"yebsap-example\". path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir(). check_downloaded logical; raise error data downloaded species.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/get_species_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the path to the data package for a given species — get_species_path","text":"path data package directory.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/get_species_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the path to the data package for a given species — get_species_path","text":"","code":"if (FALSE) { # get the path path <- get_species_path(\"yebsap-example\")  # get the path to the full data package for yellow-bellied sapsucker # common name, scientific name, or species code can be used path <- get_species_path(\"Yellow-bellied Sapsucker\") path <- get_species_path(\"Sphyrapicus varius\") path <- get_species_path(\"yebsap\") }"},{"path":"https://ebird.github.io/ebirdst/reference/grid_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatiotemporal grid sampling of observation data — grid_sample","title":"Spatiotemporal grid sampling of observation data — grid_sample","text":"Sample observation data spacetime grid reduce spatiotemporal bias.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/grid_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatiotemporal grid sampling of observation data — grid_sample","text":"","code":"grid_sample(   x,   coords = c(\"longitude\", \"latitude\", \"day_of_year\"),   is_lonlat = TRUE,   res = c(3000, 3000, 7),   jitter_grid = TRUE,   sample_size_per_cell = 1,   cell_sample_prop = 0.75,   keep_cell_id = FALSE,   grid_definition = NULL )  grid_sample_stratified(   x,   coords = c(\"longitude\", \"latitude\", \"day_of_year\"),   is_lonlat = TRUE,   unified_grid = FALSE,   keep_cell_id = FALSE,   by_year = TRUE,   case_control = TRUE,   obs_column = \"obs\",   sample_by = NULL,   min_detection_probability = 0,   maximum_ss = NULL,   jitter_columns = NULL,   jitter_sd = 0.1,   ... )"},{"path":"https://ebird.github.io/ebirdst/reference/grid_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatiotemporal grid sampling of observation data — grid_sample","text":"x data frame; observations sample, including least columns defining location space time. Additional columns can included features later used model training. coords character; names spatial temporal coordinates. default spatial spatial coordinates longitude latitude, temporal coordinate day_of_year. is_lonlat logical; points unprojected, lon-lat coordinates. case, points projected equal area Eckert IV CRS prior grid assignment. res numeric; resolution spatiotemporal grid x, y, time dimensions. Unprojected locations projected equal area coordinate system prior sampling, resolution therefore provided units meters. temporal resolution native units time coordinate input data frame, typically number days. jitter_grid logical; whether jitter location origin grid introduce randomness. sample_size_per_cell integer; number observations sample grid cell. cell_sample_prop proportion (0-1]; less 1, proportion cells randomly selected sampling. keep_cell_id logical; whether retain unique cell identifier, stored column named .cell_id. grid_definition list defining spatiotemporal sampling grid returned assign_to_grid() form attribute returned data frame. unified_grid logical; whether single, unified spatiotemporal sampling grid defined used observations x different grid used stratum. by_year logical; whether sampling done year, .e. sampling N observations per grid cell per year, rather across years, .e. N observations per grid cell regardless year. using sampling year, input data frame x must year column. case_control logical; whether apply case control sampling whereby presence absence sampled independently. obs_column character; case_control = TRUE, name column x defines detection (obs_column > 0) non-detection (obs_column == 0). sample_by character; additional columns x stratify sampling . example, landscape many small islands (defined island variable) wish sample independently, use sample_by = \"island\". min_detection_probability proportion [0-1); minimum detection probability final dataset. case_control = TRUE, proportion detections grid sampled dataset level, additional detections added via grid sampling detections input dataset least proportion detections appears final dataset. typically result duplication observations final dataset. turn feature use min_detection_probability = 0. maximum_ss integer; maximum sample size final dataset. grid sampling yields number observations, maximum_ss observations selected randomly full set. Note subsampling performed way levels strata least one observation within final dataset, therefore truly randomly sampling. jitter_columns character; detections oversampled achieve minimum detection probability, observations duplicated, can desirable slightly \"jitter\" values model training features duplicated observations. argument defines column names x jittered. jitter_sd numeric; strength jittering units standard deviations, see jitter_columns. ... additional arguments defining spatiotemporal grid; passed grid_sample().","code":""},{"path":"https://ebird.github.io/ebirdst/reference/grid_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatiotemporal grid sampling of observation data — grid_sample","text":"data frame spatiotemporally sampled data.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/grid_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatiotemporal grid sampling of observation data — grid_sample","text":"grid_sample_stratified() performs stratified case control sampling, independently sampling strata defined , example, year detection/non-detection. Within stratum, grid_sample() used sample observations spatiotemporal grid. addition, case control sampling turned , detections oversampled increase frequecy detections dataset. sampling grid defined, assignment locations cells occurs, assign_to_grid(). Consult help function details grid generated locations assigned. Note providing 2-element vectors coords res time component grid can ignored spatial-subsampling performed.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/grid_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatiotemporal grid sampling of observation data — grid_sample","text":"","code":"set.seed(1)  # generate some example observations n_obs <- 10000 checklists <- data.frame(longitude = rnorm(n_obs, sd = 0.1),                          latitude = rnorm(n_obs, sd = 0.1),                          day_of_year = sample.int(28, n_obs, replace = TRUE),                          year = NA_integer_,                          obs = rpois(n_obs, lambda = 0.1),                          forest_cover = runif(n_obs),                          island = as.integer(runif(n_obs) > 0.95)) # add a year column, giving more data to recent years checklists$year <- sample(seq(2016, 2020), size = n_obs, replace = TRUE,                           prob = seq(0.3, 0.7, length.out = 5)) # create several rare islands checklists$island[sample.int(nrow(checklists), 9)] <- 2:10  # basic spatiotemporal grid sampling sampled <- grid_sample(checklists)  # plot original data and grid sampled data par(mar = c(0, 0, 0, 0)) plot(checklists[, c(\"longitude\", \"latitude\")],      pch = 19, cex = 0.3, col = \"#00000033\",      axes = FALSE) points(sampled[, c(\"longitude\", \"latitude\")],        pch = 19, cex = 0.3, col = \"red\")   # case control sampling stratified by year and island # return a maximum of 1000 checklists sampled_cc <- grid_sample_stratified(checklists, sample_by = \"island\",                                      maximum_ss = 1000)  # case control sampling increases the prevalence of detections mean(checklists$obs > 0) #> [1] 0.1005 mean(sampled$obs > 0) #> [1] 0.1072363 mean(sampled_cc$obs > 0) #> [1] 0.171627  # stratifying by island ensures all levels are retained, even rare ones table(checklists$island) #>  #>    0    1    2    3    4    5    6    7    8    9   10  #> 9505  486    1    1    1    1    1    1    1    1    1  # normal grid sampling loses rare island levels table(sampled$island) #>  #>    0    1    3  #> 1094   52    1  # stratified grid sampling retain at least one observation from each level table(sampled_cc$island) #>  #>   0   1   2   3   4   5   6   7   8   9  10  #> 912  87   1   1   1   1   1   1   1   1   1"},{"path":"https://ebird.github.io/ebirdst/reference/load_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Load eBird Status Data Products configuration file — load_config","title":"Load eBird Status Data Products configuration file — load_config","text":"Load configuration file eBird Status run. configuration file mostly internal use contains variety parameters used modeling process.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load eBird Status Data Products configuration file — load_config","text":"","code":"load_config(species, path = ebirdst_data_dir())"},{"path":"https://ebird.github.io/ebirdst/reference/load_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load eBird Status Data Products configuration file — load_config","text":"species character; species load data , given scientific name, common name six-letter species code (e.g. \"woothr\"). full list valid species ebirdst_runs data frame included package. download example dataset, use \"yebsap-example\". path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir().","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load eBird Status Data Products configuration file — load_config","text":"list run configuration parameters.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load eBird Status Data Products configuration file — load_config","text":"","code":"if (FALSE) { # download example data if hasn't already been downloaded ebirdst_download_status(\"yebsap-example\")  # load configuration parameters p <- load_config(\"yebsap-example\") }"},{"path":"https://ebird.github.io/ebirdst/reference/load_data_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Load eBird Status and Trends Data Coverage Products — load_data_coverage","title":"Load eBird Status and Trends Data Coverage Products — load_data_coverage","text":"data coverage products packaged individual GeoTIFF files product week year. function loads one available data products one weeks R SpatRaster object. Note data must downloaded using ebirdst_download_data_coverage() prior loading using function.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_data_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load eBird Status and Trends Data Coverage Products — load_data_coverage","text":"","code":"load_data_coverage(   product = c(\"spatial-coverage\", \"selection-probability\"),   weeks = NULL,   path = ebirdst_data_dir() )"},{"path":"https://ebird.github.io/ebirdst/reference/load_data_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load eBird Status and Trends Data Coverage Products — load_data_coverage","text":"product character; data coverage raster product load: spatial coverage site selection probability. weeks character; one weeks (expressed \"MM-DD\" format) load raster layers . argument specified, downloaded weeks loaded. Note rasters quite large recommended load small number weeks data time. path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir().","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_data_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load eBird Status and Trends Data Coverage Products — load_data_coverage","text":"SpatRaster 1 52 layers given product given weeks, layer names dates (YYYY-MM-DD format) midpoint week.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_data_coverage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load eBird Status and Trends Data Coverage Products — load_data_coverage","text":"addition species-specific data products, eBird Status data products include two products providing estimates weekly data coverage 3 km spatial resolution: spatial-coverage: spatially smoothed estimate proportion area covered eBird checklists given week. selection-probability: modeled estimate probability given location habitat sampled eBird data given week.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_data_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load eBird Status and Trends Data Coverage Products — load_data_coverage","text":"","code":"if (FALSE) { # download example data if hasn't already been downloaded ebirdst_download_data_coverage()  # load a single week of site selection probability data load_data_coverage(\"selection-probability\", weeks = \"01-04\")  # load all weeks of spatial coverage data load_data_coverage(\"spatial-coverage\", weeks = c(\"01-04\", \"01-11\")) }"},{"path":"https://ebird.github.io/ebirdst/reference/load_fac_map_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Load full annual cycle map parameters — load_fac_map_parameters","title":"Load full annual cycle map parameters — load_fac_map_parameters","text":"Get map parameters used eBird Status Trends website optimally display full annual cycle data. includes bins abundance data, projection, extent map. extent spatial extent non-zero data across full annual cycle projection optimized extent.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_fac_map_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load full annual cycle map parameters — load_fac_map_parameters","text":"","code":"load_fac_map_parameters(species, path = ebirdst_data_dir())"},{"path":"https://ebird.github.io/ebirdst/reference/load_fac_map_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load full annual cycle map parameters — load_fac_map_parameters","text":"species character; species load data , given scientific name, common name six-letter species code (e.g. \"woothr\"). full list valid species ebirdst_runs data frame included package. download example dataset, use \"yebsap-example\". path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir().","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_fac_map_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load full annual cycle map parameters — load_fac_map_parameters","text":"list containing elements: custom_projection: custom projection optimized given species' full annual cycle fa_extent: SpatExtent object storing spatial extent non-zero data given species custom projection res: numeric vector 2 elements giving target resolution raster custom projection fa_extent_sinu: extent sinusoidal projection weekly_bins/weekly_labels: weekly abundance bins labels full annual cycle seasonal_bins/`seasonal_labels: seasonal abundance bins labels full annual cycle","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_fac_map_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load full annual cycle map parameters — load_fac_map_parameters","text":"","code":"if (FALSE) { # download example data if hasn't already been downloaded ebirdst_download_status(\"yebsap-example\")  # load configuration parameters load_fac_map_parameters(path) }"},{"path":"https://ebird.github.io/ebirdst/reference/load_pi.html","id":null,"dir":"Reference","previous_headings":"","what":"Load predictor importance (PI) rasters — load_pi","title":"Load predictor importance (PI) rasters — load_pi","text":"eBird Status models estimate relative importance environmental predictor used model. predictor importance (PI) data converted ranks (rank 1 important) relative full suite environmental predictors. ranks summarized 27 km resolution raster grid predictor, cell values average across models ensemble contributing cell. data available raster format provided download_pis = TRUE used calling ebirdst_download_status(). PI estimates available separately occurrence count sub-model 30 important predictors distributed. Use list_available_pis() see predictors PI data.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_pi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load predictor importance (PI) rasters — load_pi","text":"","code":"load_pi(   species,   predictor,   response = c(\"occurrence\", \"count\"),   path = ebirdst_data_dir() )  list_available_pis(species, path = ebirdst_data_dir())"},{"path":"https://ebird.github.io/ebirdst/reference/load_pi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load predictor importance (PI) rasters — load_pi","text":"species character; species load data , given scientific name, common name six-letter species code (e.g. \"woothr\"). full list valid species ebirdst_runs data frame included package. download example dataset, use \"yebsap-example\". predictor character; predictor PI data loaded . list predictors PI data available varies species, use list_available_pis() get list given species. response character; model (occurrence count) PI data loaded . path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir().","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_pi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load predictor importance (PI) rasters — load_pi","text":"SpatRaster object PI ranks given predictor. migrants, estimates weekly raster 52 layers, layer names dates (MM-DD format) midpoint week. residents, single year round layer returned. list_available_pis() returns data frame listing top 30 predictors PI rasters can loaded. addition predictor names, mean range-wide rank (rangewide_rank) given well integer rank (rank) relative 29 predictors.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_pi.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Load predictor importance (PI) rasters — load_pi","text":"list_available_pis(): list predictors PI information species.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_pi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load predictor importance (PI) rasters — load_pi","text":"","code":"if (FALSE) { # download example data if hasn't already been downloaded ebirdst_download_status(\"yebsap-example\", download_pis = TRUE)  # identify the top predictor top_preds <- list_available_pis(\"yebsap-example\") print(top_preds[1, ])  # load predictor importance raster of top predictor for occurrence load_pi(\"yebsap-example\", top_preds$predictor[1]) }"},{"path":"https://ebird.github.io/ebirdst/reference/load_ppm.html","id":null,"dir":"Reference","previous_headings":"","what":"Load predictive performance metric (PPM) rasters — load_ppm","title":"Load predictive performance metric (PPM) rasters — load_ppm","text":"eBird Status models evaluated test set eBird data used model training suite predictive performance metrics (PPMs) calculated. PPMs base model summarized 27 km resolution raster grid, cell values average across models ensemble contributing cell. data available raster format provided download_ppms = TRUE used calling ebirdst_download_status().","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_ppm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load predictive performance metric (PPM) rasters — load_ppm","text":"","code":"load_ppm(   species,   ppm = c(\"binary_f1\", \"binary_pr_auc\", \"occ_bernoulli_dev\", \"count_spearman\",     \"log_count_pearson\", \"abd_poisson_dev\", \"abd_spearman\", \"log_abd_pearson\"),   path = ebirdst_data_dir() )"},{"path":"https://ebird.github.io/ebirdst/reference/load_ppm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load predictive performance metric (PPM) rasters — load_ppm","text":"species character; species load data , given scientific name, common name six-letter species code (e.g. \"woothr\"). full list valid species ebirdst_runs data frame included package. download example dataset, use \"yebsap-example\". ppm character; name single metric load data . See Details definitions metric. path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir().","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_ppm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load predictive performance metric (PPM) rasters — load_ppm","text":"SpatRaster object PPM data. migrants, rasters weekly  52 layers, layer names dates (MM-DD format) midpoint week. residents, single year round layer returned.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_ppm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load predictive performance metric (PPM) rasters — load_ppm","text":"Eight predictive performance metrics provided: binary_f1: F1-score comparing model predictions converted binary observed detection/non-detection test checklists. binary_pr_auc: area precision-recall curve generated comparing model predictions converted binary observed detection/non-detection test checklists. occ_bernoulli_dev: Bernoulli deviance comparing predicted occurrence observed detection/non-detection test checklists. count_spearman: Spearman's rank correlation coefficient comparing predicted count observed count subset test checklists species detected. log_count_pearson: Pearson correlation coefficient comparing logarithm predicted count logarithm observed count subset test checklists species detected. abd_poisson_dev: Poisson deviance comparing predicted relative abundance observed count full set test checklists. abd_spearman: Spearman's rank  correlation coefficient comparing predicted relative abundance observed count full set test checklists. log_abd_pearson: Pearson correlation coefficient comparing logarithm predicted relative abundance logarithm observed count full set test checklists.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_ppm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load predictive performance metric (PPM) rasters — load_ppm","text":"","code":"if (FALSE) { # download example data if hasn't already been downloaded ebirdst_download_status(\"yebsap-example\", download_ppms = TRUE)  # load area under the precision-recall curve PPM raster load_ppm(\"yebsap-example\", ppm = \"binary_pr_auc\") }"},{"path":"https://ebird.github.io/ebirdst/reference/load_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Load seasonal eBird Status and Trends range polygons — load_ranges","title":"Load seasonal eBird Status and Trends range polygons — load_ranges","text":"Range polygons defined boundaries non-zero seasonal relative abundance estimates, (optionally) smoothed produce aesthetically pleasing polygons using smoothr package.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load seasonal eBird Status and Trends range polygons — load_ranges","text":"","code":"load_ranges(   species,   resolution = c(\"9km\", \"27km\"),   smoothed = TRUE,   path = ebirdst_data_dir() )"},{"path":"https://ebird.github.io/ebirdst/reference/load_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load seasonal eBird Status and Trends range polygons — load_ranges","text":"species character; species load data , given scientific name, common name six-letter species code (e.g. \"woothr\"). full list valid species ebirdst_runs data frame included package. download example dataset, use \"yebsap-example\". resolution character; raster resolution range polygons derived. smoothed logical; whether smoothed unsmoothed ranges loaded. path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir().","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_ranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load seasonal eBird Status and Trends range polygons — load_ranges","text":"sf update containing seasonal range boundaries, season provided different feature.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_ranges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load seasonal eBird Status and Trends range polygons — load_ranges","text":"","code":"if (FALSE) { # download example data if hasn't already been downloaded ebirdst_download_status(\"yebsap-example\")  # load smoothed ranges # note that only 27 km data are provided for the example data ranges <- load_ranges(\"yebsap-example\", resolution = \"27km\") }"},{"path":"https://ebird.github.io/ebirdst/reference/load_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Load eBird Status Data Products raster data — load_raster","title":"Load eBird Status Data Products raster data — load_raster","text":"eBird Status raster products packaged GeoTIFF file representing predictions regular grid. core products occurrence, count, relative abundance, proportion population. function loads one available data products R SpatRaster object. Note data must downloaded using ebirdst_download_status() prior loading using function.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load eBird Status Data Products raster data — load_raster","text":"","code":"load_raster(   species,   product = c(\"abundance\", \"count\", \"occurrence\", \"proportion-population\"),   period = c(\"weekly\", \"seasonal\", \"full-year\"),   metric = NULL,   resolution = c(\"3km\", \"9km\", \"27km\"),   path = ebirdst_data_dir() )"},{"path":"https://ebird.github.io/ebirdst/reference/load_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load eBird Status Data Products raster data — load_raster","text":"species character; species load data , given scientific name, common name six-letter species code (e.g. \"woothr\"). full list valid species ebirdst_runs data frame included package. download example dataset, use \"yebsap-example\". product character; eBird Status raster product load: occurrence, count, relative abundance, proportion population. See Details detailed explanation products. period character; temporal period estimation. eBird Status models make predictions week year; however, convenience, data also provided summarized seasonal annual (\"full-year\") level. metric character; default, weekly products provide estimates median value (metric = \"median\") summarized products cell-wise mean across weeks within season (metric = \"mean\"). However, additional variants exist products. weekly relative abundance, confidence intervals provided: specify metric = \"lower\" get 10th quantile metric = \"upper\" get 90th quantile. seasonal annual products, cell-wise maximum values across weeks can obtained metric = \"max\". resolution character; resolution raster data load. default load native 3 km resolution data; however, applications 9 km 27 km data may suitable. path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir().","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load eBird Status Data Products raster data — load_raster","text":"weekly cubes, SpatRaster 52 layers given product, layer names dates (YYYY-MM-DD format) midpoint week. Seasonal cubes four layers named corresponding season. full-year products single layer.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load eBird Status Data Products raster data — load_raster","text":"core eBird Status data products provide weekly estimates across regular spatial grid. packaged rasters 52 layers, corresponding estimates week year, refer \"cubes\" (e.g. \"relative abundance cube\"). estimates median expected value standard 2 km, 1 hour eBird Traveling Count expert eBird observer optimal time day optimal weather conditions observe given species. products : occurrence: expected probability (0-1) occurrence species. count: expected count species, conditional occurrence given location. abundance: expected relative abundance species, computed product probability occurrence count conditional occurrence. proportion-population: proportion total relative abundance within cell. derived product calculated dividing cell value relative abundance raster total abundance summed across cells. addition weekly data cubes, function provides access data summarized different periods. Seasonal cubes produced taking cell-wise mean max across weeks within season. boundary dates season species specific available ebirdst_runs, season failed review associated layer included cube. addition, full-year summaries provide mean max across weeks year fall within season passed review. Note necessarily 52 weeks year. example, estimates non-breeding season failed expert review given species, full-year summary species include weeks fall within non-breeding season.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load eBird Status Data Products raster data — load_raster","text":"","code":"if (FALSE) { # download example data if hasn't already been downloaded ebirdst_download_status(\"yebsap-example\")  # weekly relative abundance # note that only 27 km data are available for the example data abd_weekly <- load_raster(\"yebsap-example\", \"abundance\", resolution = \"27km\")  # the weeks for each layer are stored in the layer names names(abd_weekly) # they can be converted to date objects with as.Date as.Date(names(abd_weekly))  # max seasonal abundance abd_seasonal <- load_raster(\"yebsap-example\", \"abundance\",                             period = \"seasonal\", metric = \"max\",                             resolution = \"27km\") # available seasons in stack names(abd_seasonal) # subset to just breeding season abundance abd_seasonal[[\"breeding\"]] }"},{"path":"https://ebird.github.io/ebirdst/reference/load_regional_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Load regional summary statistics — load_regional_stats","title":"Load regional summary statistics — load_regional_stats","text":"Load seasonal summary statistics regions consisting countries states/provinces.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_regional_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load regional summary statistics — load_regional_stats","text":"","code":"load_regional_stats(species, path = ebirdst_data_dir())"},{"path":"https://ebird.github.io/ebirdst/reference/load_regional_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load regional summary statistics — load_regional_stats","text":"species character; species load data , given scientific name, common name six-letter species code (e.g. \"woothr\"). full list valid species ebirdst_runs data frame included package. download example dataset, use \"yebsap-example\". path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir().","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_regional_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load regional summary statistics — load_regional_stats","text":"data frame containing regional summary statistics columns: species_code: alphanumeric eBird species code. region_type: country countries state states, provinces, sub-national regions. region_code: alphanumeric code region. region_name: English name region. season: name season summary statistics calculated . abundance_mean: mean relative abundance region. total_pop_percent: proportion seasonal modeled population falling within region. range_percent_occupied: proportion region occupied species given season. range_total_percent: proportion species seasonal range falling within region. range_days_occupation: number days season region occupied species.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_regional_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load regional summary statistics — load_regional_stats","text":"","code":"if (FALSE) { # download example data if hasn't already been downloaded ebirdst_download_status(\"yebsap-example\")  # load configuration parameters regional <- load_regional_stats(\"yebsap-example\") }"},{"path":"https://ebird.github.io/ebirdst/reference/load_trends.html","id":null,"dir":"Reference","previous_headings":"","what":"Load eBird Trends estimates for a set of species — load_trends","title":"Load eBird Trends estimates for a set of species — load_trends","text":"Load relative abundance trend estimates single species set species. Trends estimated 27 km 27 km grid single season per species (breeding, non-breeding, resident).  Note data must downloaded using ebirdst_download_trends() prior loading using function.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_trends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load eBird Trends estimates for a set of species — load_trends","text":"","code":"load_trends(species, fold_estimates = FALSE, path = ebirdst_data_dir())"},{"path":"https://ebird.github.io/ebirdst/reference/load_trends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load eBird Trends estimates for a set of species — load_trends","text":"species character; one species given scientific names, common names six-letter species codes (e.g. \"woothr\"). full list valid species can viewed ebirdst_runs data frame included package; species trends estimates indicated has_trends column. access example dataset, use \"yebsap-example\". fold_estimates logical; default, trends summarized across 100-fold ensemble returned; however, setting fold_estimates = TRUE individual fold-level estimates returned. path character; directory download data . downloaded files placed sub-directory directory named data version year, e.g. \"2020\" 2020 Status Data Products. species' data package appear directory named eBird species code. Defaults persistent data directory, can found calling ebirdst_data_dir().","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_trends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load eBird Trends estimates for a set of species — load_trends","text":"data frame containing trends estimates set species. following columns included: species_code: alphanumeric eBird species code uniquely identifying species. season:  season trend estimated : breeding, nonbreeding, resident. start_year/end_year: start end years trend time period. start_date/end_date: start end dates (MM-DD format) season trend estimated. srd_id: unique integer identifier grid cell. longitude/latitude: longitude latitude grid cell center. abd: relative abundance estimate middle trend time period (e.g. 2014 2007-2021 trend). abd_ppy: median estimated percent per year change relative abundance. abd_ppy_lower/abd_ppy_upper: 80% confidence interval estimated percent per year change relative abundance. abd_ppy_nonzero: logical (TRUE/FALSE) value indicating 80% confidence limits overlap zero (FALSE) overlap zero (TRUE) abd_trend: median estimated cumulative change relative abundance trend time period. abd_trend_lower/abd_trend_upper: 80% confidence interval estimated cumulative change relative abundance trend time period. fold_estimates = TRUE, data frame fold-level trend estimates returned following columns: species_code: alphanumeric eBird species code uniquely identifying species. season:  season trend estimated : breeding, nonbreeding, resident. srd_id: unique integer identifier grid cell. abd: relative abundance estimate middle trend time period (e.g. 2014 2007-2021 trend). abd_ppy: estimated percent per year change relative abundance.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_trends.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load eBird Trends estimates for a set of species — load_trends","text":"trends relative abundance estimated using double machine learning model. quantify uncertainty, ensemble 100 estimates made location, based random subsample eBird data. estimated trend median across ensemble, 80% confidence intervals lower 10th upper 90th percentiles across ensemble. access estimates individual folds making ensemble use fold_estimates = TRUE. fold-level estimates can used quantify uncertainty, example, calculating trend given region. details methodology used estimate trends consult Fink et al. 2023.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_trends.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Load eBird Trends estimates for a set of species — load_trends","text":"Fink, D., Johnston, ., Strimas-Mackey, M., Auer, T., Hochachka, W. M., Ligocki, S., Oldham Jaromczyk, L., Robinson, O., Wood, C., Kelling, S., & Rodewald, . D. (2023). Double machine learning trend model citizen science data. Methods Ecology Evolution, 00, 1–14. https://doi.org/10.1111/2041-210X.14186","code":""},{"path":"https://ebird.github.io/ebirdst/reference/load_trends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load eBird Trends estimates for a set of species — load_trends","text":"","code":"if (FALSE) { # download example trends data if it hasn't already been downloaded ebirdst_download_trends(\"yebsap-example\")  # load trends trends <- load_trends(\"yebsap-example\")  # load fold-level estimates trends_folds <- load_trends(\"yebsap-example\", fold_estimates = TRUE) }"},{"path":"https://ebird.github.io/ebirdst/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ebird.github.io/ebirdst/reference/rasterize_trends.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert eBird Trends Data Products to raster format — rasterize_trends","title":"Convert eBird Trends Data Products to raster format — rasterize_trends","text":"eBird trends data stored tabular format, row gives trend estimate single cell 27 km x 27 km equal area grid. many applications, explicitly spatial format useful. function uses cell center coordinates convert tabular trend estimates raster format terra SpatRaster format.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/rasterize_trends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert eBird Trends Data Products to raster format — rasterize_trends","text":"","code":"rasterize_trends(   trends,   layers = c(\"abd_ppy\", \"abd_ppy_lower\", \"abd_ppy_upper\"),   trim = TRUE )"},{"path":"https://ebird.github.io/ebirdst/reference/rasterize_trends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert eBird Trends Data Products to raster format — rasterize_trends","text":"trends data frame; trends data single species returned load_trends(). layers character; column names trends data frame rasterize. columns become layers raster created. trim logical; flag indicating returned raster trimmed remove outer rows columns NA. trim = FALSE returned raster global extent, can useful rasters combined across species different ranges.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/rasterize_trends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert eBird Trends Data Products to raster format — rasterize_trends","text":"SpatRaster object.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/rasterize_trends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert eBird Trends Data Products to raster format — rasterize_trends","text":"","code":"if (FALSE) { # download example trends data if it hasn't already been downloaded ebirdst_download_trends(\"yebsap-example\")  # load trends trends <- load_trends(\"yebsap-example\")  # rasterize percent per year trend rasterize_trends(trends, \"abd_ppy\") }"},{"path":"https://ebird.github.io/ebirdst/reference/set_ebirdst_access_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Store the eBird Status and Trends access key — set_ebirdst_access_key","title":"Store the eBird Status and Trends access key — set_ebirdst_access_key","text":"Accessing eBird Status Trends data requires access key, can obtained visiting https://ebird.org/st/request. key must stored environment variable EBIRDST_KEY order ebirdst_download_status() ebirdst_download_trends() use . easiest approach store key .Renviron file can always accessed R sessions. Use function set EBIRDST_KEY .Renviron file provided located standard location home directory. also possible manually edit .Renviron file. access key specific never shared made publicly accessible.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/set_ebirdst_access_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store the eBird Status and Trends access key — set_ebirdst_access_key","text":"","code":"set_ebirdst_access_key(key, overwrite = FALSE)"},{"path":"https://ebird.github.io/ebirdst/reference/set_ebirdst_access_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store the eBird Status and Trends access key — set_ebirdst_access_key","text":"key character; API key obtained filling form https://ebird.org/st/request. overwrite logical; existing EBIRDST_KEY overwritten already set .Renviron.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/set_ebirdst_access_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store the eBird Status and Trends access key — set_ebirdst_access_key","text":"Edits .Renviron, returns path file invisibly.","code":""},{"path":"https://ebird.github.io/ebirdst/reference/set_ebirdst_access_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store the eBird Status and Trends access key — set_ebirdst_access_key","text":"","code":"if (FALSE) { # save the api key, replace XXXXXX with your actual key set_ebirdst_access_key(\"XXXXXX\") }"},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-320224","dir":"Changelog","previous_headings":"","what":"ebirdst 3.2022.4","title":"ebirdst 3.2022.4","text":"add capability download load data coverage layers Northern Goshawk species code incorrect","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-320223","dir":"Changelog","previous_headings":"","what":"ebirdst 3.2022.3","title":"ebirdst 3.2022.3","text":"CRAN release: 2024-03-05 arrow back CRAN, move Suggests back Imports add 6 new species Australia","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-320222","dir":"Changelog","previous_headings":"","what":"ebirdst 3.2022.2","title":"ebirdst 3.2022.2","text":"CRAN release: 2024-02-23 switch terminology “trajectory” “migration chronology” ensure rasterize_trends() works older versions terra (issue #7) move arrow package Suggests back CRAN (see https://github.com/apache/arrow/issues/39806)","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-320221","dir":"Changelog","previous_headings":"","what":"ebirdst 3.2022.1","title":"ebirdst 3.2022.1","text":"CRAN release: 2023-12-08 Documented functions deprecated defunct relative version 2.2021.3 topics ebirdst-defunct ebirdst-deprecated added back package. allows packages conditionally reference 2.2021.3 installed still passing CRAN checks.","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-320220","dir":"Changelog","previous_headings":"","what":"ebirdst 3.2022.0","title":"ebirdst 3.2022.0","text":"CRAN release: 2023-11-15 new 2022 status data trends data released first time! major overhaul allow targeting downloading data stixel-level results (PPMS/PIs/PDs) removed, replaced spatialized raster versions restart required updating API key change package-level documentation per roxygen2 suggestions","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-220213","dir":"Changelog","previous_headings":"","what":"ebirdst 2.2021.3","title":"ebirdst 2.2021.3","text":"CRAN release: 2023-05-09 fix bug causing stixels missing bounds raise error ebirdst_habitat() add function estimate MCC-F1 ebirdst_ppms()","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-220212","dir":"Changelog","previous_headings":"","what":"ebirdst 2.2021.2","title":"ebirdst 2.2021.2","text":"CRAN release: 2023-04-27 add robust grid sampling function.","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-220211","dir":"Changelog","previous_headings":"","what":"ebirdst 2.2021.1","title":"ebirdst 2.2021.1","text":"CRAN release: 2023-04-06 release final batch 300 species 2021 bringing total 2,282","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-220210","dir":"Changelog","previous_headings":"","what":"ebirdst 2.2021.0","title":"ebirdst 2.2021.0","text":"CRAN release: 2023-01-18 transition using raster terra handling raster data move following packages Imports Suggests: gbm, mgcv, precrec, PresenceAbsence move package eBird GitHub organization https://github.com/ebird/ebirdst","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-120213","dir":"Changelog","previous_headings":"","what":"ebirdst 1.2021.3","title":"ebirdst 1.2021.3","text":"CRAN release: 2023-01-11 patch fix bug introduced last release causing missing config files data downloads [issue #44]","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-120212","dir":"Changelog","previous_headings":"","what":"ebirdst 1.2021.2","title":"ebirdst 1.2021.2","text":"CRAN release: 2023-01-06 fix bug causing species base code downloaded together, e.g. leafly also downloads leafly2 [issue #43]","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-120211","dir":"Changelog","previous_headings":"","what":"ebirdst 1.2021.1","title":"ebirdst 1.2021.1","text":"CRAN release: 2022-12-07 fix bug extent load_fac_map_parameters(), GitHub issue #40 use dynamic PAT cutoff PPM calculations update species list account second release eBird data year","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-120210","dir":"Changelog","previous_headings":"","what":"ebirdst 1.2021.0","title":"ebirdst 1.2021.0","text":"CRAN release: 2022-11-09 update v2021 eBird Status Trends data","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-120201","dir":"Changelog","previous_headings":"","what":"ebirdst 1.2020.1","title":"ebirdst 1.2020.1","text":"CRAN release: 2022-07-08 CRAN checks found files created left behind ~/Desktop, relocated test files tempdir() deleting test completion withr::defer()","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-120200","dir":"Changelog","previous_headings":"","what":"ebirdst 1.2020.0","title":"ebirdst 1.2020.0","text":"CRAN release: 2022-07-07 major update align new eBird Status Trends API update align 2020 eBird Status Data Products transition rappdirs tools::R_user_dir() handling download directories new vignettes","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-035","dir":"Changelog","previous_headings":"","what":"ebirdst 0.3.5","title":"ebirdst 0.3.5","text":"CRAN release: 2022-04-01 bug fix: API update causing data downloads fail","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-034","dir":"Changelog","previous_headings":"","what":"ebirdst 0.3.4","title":"ebirdst 0.3.4","text":"CRAN release: 2022-03-16 rename master branch main GitHub requires different download path example data","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-033","dir":"Changelog","previous_headings":"","what":"ebirdst 0.3.3","title":"ebirdst 0.3.3","text":"CRAN release: 2021-11-12 move example data GitHub","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-032","dir":"Changelog","previous_headings":"","what":"ebirdst 0.3.2","title":"ebirdst 0.3.2","text":"CRAN release: 2021-09-15 try prevent tests examples leaving files behind pass CRAN checks","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-031","dir":"Changelog","previous_headings":"","what":"ebirdst 0.3.1","title":"ebirdst 0.3.1","text":"CRAN release: 2021-08-18 prevent tests examples leaving files behind pass CRAN checks","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-031-1","dir":"Changelog","previous_headings":"","what":"ebirdst 0.3.1","title":"ebirdst 0.3.1","text":"CRAN release: 2021-08-18 prevent tests examples leaving files behind pass CRAN checks","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-030","dir":"Changelog","previous_headings":"","what":"ebirdst 0.3.0","title":"ebirdst 0.3.0","text":"CRAN release: 2021-08-10 add support new data structures used 2020 eBird Status Trends functionality handle partial dependence data added overhaul package API intuitive streamlined documentation vignettes updated","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-022","dir":"Changelog","previous_headings":"","what":"ebirdst 0.2.2","title":"ebirdst 0.2.2","text":"CRAN release: 2021-01-16 add support variable ensemble support compute_ppms()","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-021","dir":"Changelog","previous_headings":"","what":"ebirdst 0.2.1","title":"ebirdst 0.2.1","text":"CRAN release: 2020-03-23 bug fix: corrected date types seasonal definitions bug fix: fixed possibility ebirdst_extent produce invalid date (day 366 2015) added import pipe operator velox archived, removed dependency Suggests fasterize archived, removed dependency Imports","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-020","dir":"Changelog","previous_headings":"","what":"ebirdst 0.2.0","title":"ebirdst 0.2.0","text":"CRAN release: 2020-02-26 change maintainer Matthew Strimas-Mackey update access 2019 status trends data partial dependence data longer available, references PDs removed bug fix: load_raster() gave incorrect names seasonal rasters bug fix: didn’t properly implement quantile binning date_to_st_week() gets status trends week give vector dates","code":""},{"path":"https://ebird.github.io/ebirdst/news/index.html","id":"ebirdst-010","dir":"Changelog","previous_headings":"","what":"ebirdst 0.1.0","title":"ebirdst 0.1.0","text":"CRAN release: 2019-04-04 first CRAN release","code":""}]
